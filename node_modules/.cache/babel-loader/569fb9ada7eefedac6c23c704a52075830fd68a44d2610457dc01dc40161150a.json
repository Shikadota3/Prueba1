{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nimport { Capacitor } from '@capacitor/core';\n\n// Configuración común\nconst DB_CONFIG = {\n  name: 'vidawasi_db',\n  version: 1,\n  encryption: false,\n  mode: 'no-encryption'\n};\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\n\n// ==================== IMPLEMENTACIÓN WEB ====================\nconst createWebDB = () => {\n  console.log('Inicializando base de datos virtual para navegador');\n  let data = {\n    usuarios: [{\n      id: 1,\n      nombre: 'Admin Local',\n      email: 'admin@vidawasi.com',\n      password: 'admin123',\n      rol: 'administracion',\n      registrado_en: new Date().toISOString(),\n      is_logged_in: 1\n    }],\n    pacientes: [],\n    citas: []\n  };\n  const webDB = {\n    execute: async () => {},\n    query: async (sql, params = []) => {\n      if (sql.includes('SELECT * FROM usuarios WHERE email')) {\n        return {\n          values: data.usuarios.filter(u => u.email === params[0] && u.password === params[1])\n        };\n      }\n      if (sql.includes('SELECT * FROM usuarios WHERE is_logged_in = 1')) {\n        return {\n          values: data.usuarios.filter(u => u.is_logged_in)\n        };\n      }\n      if (sql.includes('SELECT 1 FROM usuarios WHERE email')) {\n        return {\n          values: data.usuarios.some(u => u.email === params[0]) ? [1] : []\n        };\n      }\n      if (sql.includes('FROM pacientes')) {\n        return {\n          values: data.pacientes\n        };\n      }\n      if (sql.includes('FROM citas')) {\n        return {\n          values: data.citas\n        };\n      }\n      return {\n        values: []\n      };\n    },\n    run: async (sql, params = []) => {\n      if (sql.includes('INSERT INTO usuarios')) {\n        const newUser = {\n          id: Date.now(),\n          ...params,\n          registrado_en: new Date().toISOString(),\n          is_logged_in: 0\n        };\n        data.usuarios.push(newUser);\n        return {\n          lastId: newUser.id,\n          changes: 1\n        };\n      }\n      if (sql.includes('UPDATE usuarios SET is_logged_in')) {\n        data.usuarios.forEach(u => u.is_logged_in = params[0]);\n        if (params[1]) {\n          const user = data.usuarios.find(u => u.id === params[1]);\n          if (user) user.is_logged_in = 1;\n        }\n        return {\n          changes: 1\n        };\n      }\n      return {\n        changes: 0,\n        lastId: -1\n      };\n    },\n    close: async () => {},\n    isConnected: async () => ({\n      connected: true\n    }),\n    // Herramientas de desarrollo\n    _getData: () => data,\n    _resetData: () => {\n      data = {\n        usuarios: [],\n        pacientes: [],\n        citas: []\n      };\n    }\n  };\n  return webDB;\n};\n\n// ==================== IMPLEMENTACIÓN NATIVA ====================\nconst initializeNativeDB = async () => {\n  var _adminExists$values;\n  dbInstance = await sqlite.createConnection(DB_CONFIG);\n  await dbInstance.open();\n  if (!(await dbInstance.isConnected()).connected) {\n    throw new Error('Conexión fallida');\n  }\n\n  // Creación de tablas\n  await dbInstance.executeTransaction([{\n    statement: `CREATE TABLE IF NOT EXISTS usuarios (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\n        registrado_en TEXT NOT NULL,\n        is_logged_in BOOLEAN DEFAULT 0\n      )`\n  }, {\n    statement: `CREATE TABLE IF NOT EXISTS pacientes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        edad INTEGER,\n        diagnostico TEXT,\n        hemoglobina REAL,\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\n      )`\n  }, {\n    statement: `CREATE TABLE IF NOT EXISTS citas (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        paciente_id INTEGER,\n        fecha TEXT NOT NULL,\n        hora TEXT NOT NULL,\n        motivo TEXT,\n        estado TEXT DEFAULT 'pendiente',\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\n      )`\n  }]);\n\n  // Datos iniciales\n  const adminExists = await dbInstance.query('SELECT 1 FROM usuarios WHERE email = ?', ['admin@vidawasi.com']);\n  if (!((_adminExists$values = adminExists.values) !== null && _adminExists$values !== void 0 && _adminExists$values.length)) {\n    await dbInstance.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n       VALUES (?, ?, ?, ?, ?)`, ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]);\n  }\n  return dbInstance;\n};\n\n// ==================== FUNCIÓN WRAPPER ====================\nconst withDB = async operation => {\n  const db = await initDB();\n  try {\n    return await operation(db);\n  } catch (error) {\n    console.error('Error en operación DB:', error);\n    throw error;\n  }\n};\n\n// ==================== OPERACIONES CRUD ====================\nexport const initDB = async () => {\n  if (dbInstance) return dbInstance;\n  try {\n    dbInstance = Capacitor.isNativePlatform() ? await initializeNativeDB() : createWebDB();\n    console.log(`Base de datos ${Capacitor.isNativePlatform() ? 'nativa' : 'web'} inicializada`);\n    return dbInstance;\n  } catch (error) {\n    console.error('Error al inicializar DB:', error);\n    throw new Error(`Error de conexión: ${error.message}`);\n  }\n};\nexport const loginUser = async (email, password) => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1', [email, password]);\n    if (result.values.length > 0) {\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\n      return result.values[0];\n    }\n    return null;\n  });\n};\nexport const registerUser = async userData => {\n  return withDB(async db => {\n    const existing = await db.query('SELECT 1 FROM usuarios WHERE email = ?', [userData.email]);\n    if (existing.values.length > 0) {\n      throw new Error('El email ya está registrado');\n    }\n    const result = await db.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n       VALUES (?, ?, ?, ?, ?)`, [userData.nombre, userData.email, userData.password, userData.rol, new Date().toISOString()]);\n    return result.lastId;\n  });\n};\nexport const getCurrentUser = async () => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\n    return result.values.length > 0 ? result.values[0] : null;\n  });\n};\nexport const logoutUser = async () => {\n  return withDB(async db => {\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\n  });\n};\nexport const getPacientes = async () => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM pacientes');\n    return result.values || [];\n  });\n};\nexport const addPaciente = async paciente => {\n  return withDB(async db => {\n    const result = await db.run('INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)', [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]);\n    return result.lastId;\n  });\n};\nexport const getCitas = async () => {\n  return withDB(async db => {\n    const result = await db.query(`\n      SELECT c.*, p.nombre as paciente_nombre \n      FROM citas c\n      LEFT JOIN pacientes p ON c.paciente_id = p.id\n    `);\n    return result.values || [];\n  });\n};\nexport const addCita = async cita => {\n  return withDB(async db => {\n    const result = await db.run(`INSERT INTO citas (paciente_id, fecha, hora, motivo)\n       VALUES (?, ?, ?, ?)`, [cita.patientId, cita.date, cita.time, cita.reason]);\n    return result.lastId;\n  });\n};\nexport const resetDB = async () => {\n  if (!Capacitor.isNativePlatform()) {\n    console.warn('Reset DB solo disponible en modo nativo');\n    return;\n  }\n  try {\n    await sqlite.deleteDatabase({\n      database: 'vidawasi_db'\n    });\n    dbInstance = null;\n    console.log('Base de datos reiniciada');\n  } catch (error) {\n    console.error('Error al resetear DB:', error);\n    throw error;\n  }\n};\nexport const devTools = {\n  exportData: async () => {\n    const db = await initDB();\n    if (Capacitor.isNativePlatform()) {\n      const [usuarios, pacientes, citas] = await Promise.all([db.query('SELECT * FROM usuarios'), db.query('SELECT * FROM pacientes'), db.query('SELECT * FROM citas')]);\n      return {\n        usuarios: usuarios.values,\n        pacientes: pacientes.values,\n        citas: citas.values\n      };\n    } else {\n      return db._getData();\n    }\n  },\n  importData: async data => {\n    const db = await initDB();\n    if (Capacitor.isNativePlatform()) {\n      await db.execute('DELETE FROM usuarios');\n      await db.execute('DELETE FROM pacientes');\n      await db.execute('DELETE FROM citas');\n      for (const user of data.usuarios) {\n        await db.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n           VALUES (?, ?, ?, ?, ?)`, [user.nombre, user.email, user.password, user.rol, user.registrado_en]);\n      }\n      // Similar para pacientes y citas\n    } else {\n      db._resetData();\n      Object.assign(db._getData(), data);\n    }\n  }\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","Capacitor","DB_CONFIG","name","version","encryption","mode","sqlite","dbInstance","createWebDB","console","log","data","usuarios","id","nombre","email","password","rol","registrado_en","Date","toISOString","is_logged_in","pacientes","citas","webDB","execute","query","sql","params","includes","values","filter","u","some","run","newUser","now","push","lastId","changes","forEach","user","find","close","isConnected","connected","_getData","_resetData","initializeNativeDB","_adminExists$values","createConnection","open","Error","executeTransaction","statement","adminExists","length","withDB","operation","db","initDB","error","isNativePlatform","message","loginUser","result","registerUser","userData","existing","getCurrentUser","logoutUser","getPacientes","addPaciente","paciente","edad","diagnostico","hemoglobina","getCitas","addCita","cita","patientId","date","time","reason","resetDB","warn","deleteDatabase","database","devTools","exportData","Promise","all","importData","Object","assign"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\n// Configuración común\r\nconst DB_CONFIG = {\r\n  name: 'vidawasi_db',\r\n  version: 1,\r\n  encryption: false,\r\n  mode: 'no-encryption'\r\n};\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\n// ==================== IMPLEMENTACIÓN WEB ====================\r\nconst createWebDB = () => {\r\n  console.log('Inicializando base de datos virtual para navegador');\r\n  \r\n  let data = {\r\n    usuarios: [\r\n      {\r\n        id: 1,\r\n        nombre: 'Admin Local',\r\n        email: 'admin@vidawasi.com',\r\n        password: 'admin123',\r\n        rol: 'administracion',\r\n        registrado_en: new Date().toISOString(),\r\n        is_logged_in: 1\r\n      }\r\n    ],\r\n    pacientes: [],\r\n    citas: []\r\n  };\r\n\r\n  const webDB = {\r\n    execute: async () => {},\r\n    \r\n    query: async (sql, params = []) => {\r\n      if (sql.includes('SELECT * FROM usuarios WHERE email')) {\r\n        return { \r\n          values: data.usuarios.filter(u => \r\n            u.email === params[0] && u.password === params[1]\r\n          ) \r\n        };\r\n      }\r\n      if (sql.includes('SELECT * FROM usuarios WHERE is_logged_in = 1')) {\r\n        return { values: data.usuarios.filter(u => u.is_logged_in) };\r\n      }\r\n      if (sql.includes('SELECT 1 FROM usuarios WHERE email')) {\r\n        return { values: data.usuarios.some(u => u.email === params[0]) ? [1] : [] };\r\n      }\r\n      if (sql.includes('FROM pacientes')) {\r\n        return { values: data.pacientes };\r\n      }\r\n      if (sql.includes('FROM citas')) {\r\n        return { values: data.citas };\r\n      }\r\n      return { values: [] };\r\n    },\r\n\r\n    run: async (sql, params = []) => {\r\n      if (sql.includes('INSERT INTO usuarios')) {\r\n        const newUser = {\r\n          id: Date.now(),\r\n          ...params,\r\n          registrado_en: new Date().toISOString(),\r\n          is_logged_in: 0\r\n        };\r\n        data.usuarios.push(newUser);\r\n        return { lastId: newUser.id, changes: 1 };\r\n      }\r\n      if (sql.includes('UPDATE usuarios SET is_logged_in')) {\r\n        data.usuarios.forEach(u => u.is_logged_in = params[0]);\r\n        if (params[1]) {\r\n          const user = data.usuarios.find(u => u.id === params[1]);\r\n          if (user) user.is_logged_in = 1;\r\n        }\r\n        return { changes: 1 };\r\n      }\r\n      return { changes: 0, lastId: -1 };\r\n    },\r\n\r\n    close: async () => {},\r\n    isConnected: async () => ({ connected: true }),\r\n\r\n    // Herramientas de desarrollo\r\n    _getData: () => data,\r\n    _resetData: () => {\r\n      data = { \r\n        usuarios: [], \r\n        pacientes: [], \r\n        citas: [] \r\n      };\r\n    }\r\n  };\r\n\r\n  return webDB;\r\n};\r\n\r\n// ==================== IMPLEMENTACIÓN NATIVA ====================\r\nconst initializeNativeDB = async () => {\r\n  dbInstance = await sqlite.createConnection(DB_CONFIG);\r\n  await dbInstance.open();\r\n\r\n  if (!(await dbInstance.isConnected()).connected) {\r\n    throw new Error('Conexión fallida');\r\n  }\r\n\r\n  // Creación de tablas\r\n  await dbInstance.executeTransaction([\r\n    {\r\n      statement: `CREATE TABLE IF NOT EXISTS usuarios (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        email TEXT UNIQUE NOT NULL,\r\n        password TEXT NOT NULL,\r\n        rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\r\n        registrado_en TEXT NOT NULL,\r\n        is_logged_in BOOLEAN DEFAULT 0\r\n      )`\r\n    },\r\n    {\r\n      statement: `CREATE TABLE IF NOT EXISTS pacientes (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        edad INTEGER,\r\n        diagnostico TEXT,\r\n        hemoglobina REAL,\r\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\r\n      )`\r\n    },\r\n    {\r\n      statement: `CREATE TABLE IF NOT EXISTS citas (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        paciente_id INTEGER,\r\n        fecha TEXT NOT NULL,\r\n        hora TEXT NOT NULL,\r\n        motivo TEXT,\r\n        estado TEXT DEFAULT 'pendiente',\r\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\r\n      )`\r\n    }\r\n  ]);\r\n\r\n  // Datos iniciales\r\n  const adminExists = await dbInstance.query(\r\n    'SELECT 1 FROM usuarios WHERE email = ?',\r\n    ['admin@vidawasi.com']\r\n  );\r\n  \r\n  if (!adminExists.values?.length) {\r\n    await dbInstance.run(\r\n      `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]\r\n    );\r\n  }\r\n\r\n  return dbInstance;\r\n};\r\n\r\n// ==================== FUNCIÓN WRAPPER ====================\r\nconst withDB = async (operation) => {\r\n  const db = await initDB();\r\n  try {\r\n    return await operation(db);\r\n  } catch (error) {\r\n    console.error('Error en operación DB:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ==================== OPERACIONES CRUD ====================\r\nexport const initDB = async () => {\r\n  if (dbInstance) return dbInstance;\r\n\r\n  try {\r\n    dbInstance = Capacitor.isNativePlatform() \r\n      ? await initializeNativeDB() \r\n      : createWebDB();\r\n\r\n    console.log(`Base de datos ${Capacitor.isNativePlatform() ? 'nativa' : 'web'} inicializada`);\r\n    return dbInstance;\r\n  } catch (error) {\r\n    console.error('Error al inicializar DB:', error);\r\n    throw new Error(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const loginUser = async (email, password) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1',\r\n      [email, password]\r\n    );\r\n    \r\n    if (result.values.length > 0) {\r\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\r\n      return result.values[0];\r\n    }\r\n    return null;\r\n  });\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  return withDB(async (db) => {\r\n    const existing = await db.query(\r\n      'SELECT 1 FROM usuarios WHERE email = ?', \r\n      [userData.email]\r\n    );\r\n    \r\n    if (existing.values.length > 0) {\r\n      throw new Error('El email ya está registrado');\r\n    }\r\n\r\n    const result = await db.run(\r\n      `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      [\r\n        userData.nombre, \r\n        userData.email, \r\n        userData.password, \r\n        userData.rol, \r\n        new Date().toISOString()\r\n      ]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1'\r\n    );\r\n    return result.values.length > 0 ? result.values[0] : null;\r\n  });\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n  return withDB(async (db) => {\r\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n  });\r\n};\r\n\r\nexport const getPacientes = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query('SELECT * FROM pacientes');\r\n    return result.values || [];\r\n  });\r\n};\r\n\r\nexport const addPaciente = async (paciente) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.run(\r\n      'INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)',\r\n      [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\nexport const getCitas = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(`\r\n      SELECT c.*, p.nombre as paciente_nombre \r\n      FROM citas c\r\n      LEFT JOIN pacientes p ON c.paciente_id = p.id\r\n    `);\r\n    return result.values || [];\r\n  });\r\n};\r\n\r\nexport const addCita = async (cita) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.run(\r\n      `INSERT INTO citas (paciente_id, fecha, hora, motivo)\r\n       VALUES (?, ?, ?, ?)`,\r\n      [cita.patientId, cita.date, cita.time, cita.reason]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\nexport const resetDB = async () => {\r\n  if (!Capacitor.isNativePlatform()) {\r\n    console.warn('Reset DB solo disponible en modo nativo');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    await sqlite.deleteDatabase({ database: 'vidawasi_db' });\r\n    dbInstance = null;\r\n    console.log('Base de datos reiniciada');\r\n  } catch (error) {\r\n    console.error('Error al resetear DB:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const devTools = {\r\n  exportData: async () => {\r\n    const db = await initDB();\r\n    if (Capacitor.isNativePlatform()) {\r\n      const [usuarios, pacientes, citas] = await Promise.all([\r\n        db.query('SELECT * FROM usuarios'),\r\n        db.query('SELECT * FROM pacientes'),\r\n        db.query('SELECT * FROM citas')\r\n      ]);\r\n      return {\r\n        usuarios: usuarios.values,\r\n        pacientes: pacientes.values,\r\n        citas: citas.values\r\n      };\r\n    } else {\r\n      return db._getData();\r\n    }\r\n  },\r\n  importData: async (data) => {\r\n    const db = await initDB();\r\n    if (Capacitor.isNativePlatform()) {\r\n      await db.execute('DELETE FROM usuarios');\r\n      await db.execute('DELETE FROM pacientes');\r\n      await db.execute('DELETE FROM citas');\r\n      \r\n      for (const user of data.usuarios) {\r\n        await db.run(\r\n          `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n           VALUES (?, ?, ?, ?, ?)`,\r\n          [user.nombre, user.email, user.password, user.rol, user.registrado_en]\r\n        );\r\n      }\r\n      // Similar para pacientes y citas\r\n    } else {\r\n      db._resetData();\r\n      Object.assign(db._getData(), data);\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}