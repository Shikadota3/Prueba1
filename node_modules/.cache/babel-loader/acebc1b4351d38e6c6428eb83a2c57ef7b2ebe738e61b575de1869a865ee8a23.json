{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nimport { Capacitor } from '@capacitor/core';\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\n\n// Verificador de plataforma\nconst isNative = Capacitor.isNativePlatform();\n\n// Inicialización robusta de la base de datos\nexport const initDB = async () => {\n  try {\n    if (!dbInstance) {\n      // 1. Verificar disponibilidad del plugin\n      if (!sqlite || !CapacitorSQLite) {\n        throw new Error('SQLite plugin no disponible');\n      }\n\n      // 2. Crear conexión\n      dbInstance = await sqlite.createConnection('vidawasi_db', false, 'no-encryption', 1, false);\n\n      // 3. Abrir conexión con timeout\n      await dbInstance.open();\n\n      // 4. Verificar conexión\n      const isConnected = await dbInstance.isConnection();\n      if (!isConnected.result) {\n        throw new Error('Conexión fallida');\n      }\n\n      // 5. Crear tablas con transacción\n      await dbInstance.beginTransaction();\n      try {\n        await dbInstance.execute(`\n          CREATE TABLE IF NOT EXISTS pacientes (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT NOT NULL,\n            edad INTEGER,\n            diagnostico TEXT,\n            hemoglobina REAL,\n            fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\n          );\n        `);\n        await dbInstance.execute(`\n          CREATE TABLE IF NOT EXISTS citas (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            paciente_id INTEGER,\n            fecha TEXT NOT NULL,\n            hora TEXT NOT NULL,\n            motivo TEXT,\n            estado TEXT DEFAULT 'pendiente',\n            FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\n          );\n        `);\n        await dbInstance.execute(`\n          CREATE TABLE IF NOT EXISTS usuarios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nombre TEXT NOT NULL,\n            email TEXT UNIQUE NOT NULL,\n            password TEXT NOT NULL,\n            rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\n            registrado_en TEXT NOT NULL,\n            is_logged_in BOOLEAN DEFAULT 0\n          );\n        `);\n\n        // 6. Datos iniciales\n        await seedInitialData();\n        await dbInstance.commitTransaction();\n      } catch (txError) {\n        await dbInstance.rollbackTransaction();\n        throw txError;\n      }\n    }\n    return dbInstance;\n  } catch (error) {\n    console.error('Error en initDB:', error);\n    throw new Error(`Error de base de datos: ${error.message}`);\n  }\n};\n\n// Datos iniciales\nconst seedInitialData = async () => {\n  const adminExists = await dbInstance.query('SELECT 1 FROM usuarios WHERE email = ?', ['admin@vidawasi.com']);\n  if (adminExists.values.length === 0) {\n    await dbInstance.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n       VALUES (?, ?, ?, ?, ?)`, ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]);\n  }\n};\n\n// Operaciones con manejo de errores mejorado\nconst withDB = async operation => {\n  try {\n    const db = await initDB();\n    return await operation(db);\n  } catch (error) {\n    console.error(`Error en operación DB: ${error.message}`);\n    throw error;\n  }\n};\n\n// Autenticación\nexport const loginUser = async (email, password) => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1', [email, password]);\n    if (result.values.length > 0) {\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\n      return result.values[0];\n    }\n    return null;\n  });\n};\nexport const registerUser = async userData => {\n  return withDB(async db => {\n    const existing = await db.query('SELECT 1 FROM usuarios WHERE email = ?', [userData.email]);\n    if (existing.values.length > 0) {\n      throw new Error('El email ya está registrado');\n    }\n    const result = await db.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n       VALUES (?, ?, ?, ?, ?)`, [userData.nombre, userData.email, userData.password, userData.rol, new Date().toISOString()]);\n    return result.lastId;\n  });\n};\nexport const getCurrentUser = async () => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\n    return result.values.length > 0 ? result.values[0] : null;\n  });\n};\nexport const logoutUser = async () => {\n  return withDB(async db => {\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\n  });\n};\n\n// Operaciones para pacientes\nexport const getPacientes = async () => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM pacientes');\n    return result.values || [];\n  });\n};\nexport const addPaciente = async paciente => {\n  return withDB(async db => {\n    const result = await db.run('INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)', [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]);\n    return result.lastId;\n  });\n};\n\n// Operaciones para citas\nexport const getCitas = async () => {\n  return withDB(async db => {\n    const result = await db.query(`\n      SELECT c.*, p.nombre as paciente_nombre \n      FROM citas c\n      LEFT JOIN pacientes p ON c.paciente_id = p.id\n    `);\n    return result.values || [];\n  });\n};\nexport const addCita = async cita => {\n  return withDB(async db => {\n    const result = await db.run(`INSERT INTO citas (paciente_id, fecha, hora, motivo)\n       VALUES (?, ?, ?, ?)`, [cita.patientId, cita.date, cita.time, cita.reason]);\n    return result.lastId;\n  });\n};\n\n// Función para desarrollo: resetear DB\nexport const resetDB = async () => {\n  if (!isNative) return;\n  try {\n    await sqlite.deleteDatabase({\n      database: 'vidawasi_db'\n    });\n    dbInstance = null;\n    console.log('Base de datos reiniciada');\n  } catch (error) {\n    console.error('Error al resetear DB:', error);\n  }\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","Capacitor","sqlite","dbInstance","isNative","isNativePlatform","initDB","Error","createConnection","open","isConnected","isConnection","result","beginTransaction","execute","seedInitialData","commitTransaction","txError","rollbackTransaction","error","console","message","adminExists","query","values","length","run","Date","toISOString","withDB","operation","db","loginUser","email","password","id","registerUser","userData","existing","nombre","rol","lastId","getCurrentUser","logoutUser","getPacientes","addPaciente","paciente","edad","diagnostico","hemoglobina","getCitas","addCita","cita","patientId","date","time","reason","resetDB","deleteDatabase","database","log"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\n// Verificador de plataforma\r\nconst isNative = Capacitor.isNativePlatform();\r\n\r\n// Inicialización robusta de la base de datos\r\nexport const initDB = async () => {\r\n  try {\r\n    if (!dbInstance) {\r\n      // 1. Verificar disponibilidad del plugin\r\n      if (!sqlite || !CapacitorSQLite) {\r\n        throw new Error('SQLite plugin no disponible');\r\n      }\r\n\r\n      // 2. Crear conexión\r\n      dbInstance = await sqlite.createConnection(\r\n        'vidawasi_db',\r\n        false,\r\n        'no-encryption',\r\n        1,\r\n        false\r\n      );\r\n\r\n      // 3. Abrir conexión con timeout\r\n      await dbInstance.open();\r\n\r\n      // 4. Verificar conexión\r\n      const isConnected = await dbInstance.isConnection();\r\n      if (!isConnected.result) {\r\n        throw new Error('Conexión fallida');\r\n      }\r\n\r\n      // 5. Crear tablas con transacción\r\n      await dbInstance.beginTransaction();\r\n      try {\r\n        await dbInstance.execute(`\r\n          CREATE TABLE IF NOT EXISTS pacientes (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            nombre TEXT NOT NULL,\r\n            edad INTEGER,\r\n            diagnostico TEXT,\r\n            hemoglobina REAL,\r\n            fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\r\n          );\r\n        `);\r\n\r\n        await dbInstance.execute(`\r\n          CREATE TABLE IF NOT EXISTS citas (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            paciente_id INTEGER,\r\n            fecha TEXT NOT NULL,\r\n            hora TEXT NOT NULL,\r\n            motivo TEXT,\r\n            estado TEXT DEFAULT 'pendiente',\r\n            FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\r\n          );\r\n        `);\r\n\r\n        await dbInstance.execute(`\r\n          CREATE TABLE IF NOT EXISTS usuarios (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            nombre TEXT NOT NULL,\r\n            email TEXT UNIQUE NOT NULL,\r\n            password TEXT NOT NULL,\r\n            rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\r\n            registrado_en TEXT NOT NULL,\r\n            is_logged_in BOOLEAN DEFAULT 0\r\n          );\r\n        `);\r\n\r\n        // 6. Datos iniciales\r\n        await seedInitialData();\r\n        await dbInstance.commitTransaction();\r\n      } catch (txError) {\r\n        await dbInstance.rollbackTransaction();\r\n        throw txError;\r\n      }\r\n    }\r\n    return dbInstance;\r\n  } catch (error) {\r\n    console.error('Error en initDB:', error);\r\n    throw new Error(`Error de base de datos: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Datos iniciales\r\nconst seedInitialData = async () => {\r\n  const adminExists = await dbInstance.query(\r\n    'SELECT 1 FROM usuarios WHERE email = ?',\r\n    ['admin@vidawasi.com']\r\n  );\r\n  \r\n  if (adminExists.values.length === 0) {\r\n    await dbInstance.run(\r\n      `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      [\r\n        'Administrador', \r\n        'admin@vidawasi.com', \r\n        'admin123', \r\n        'administracion', \r\n        new Date().toISOString()\r\n      ]\r\n    );\r\n  }\r\n};\r\n\r\n// Operaciones con manejo de errores mejorado\r\nconst withDB = async (operation) => {\r\n  try {\r\n    const db = await initDB();\r\n    return await operation(db);\r\n  } catch (error) {\r\n    console.error(`Error en operación DB: ${error.message}`);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Autenticación\r\nexport const loginUser = async (email, password) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1',\r\n      [email, password]\r\n    );\r\n    \r\n    if (result.values.length > 0) {\r\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\r\n      return result.values[0];\r\n    }\r\n    return null;\r\n  });\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  return withDB(async (db) => {\r\n    const existing = await db.query(\r\n      'SELECT 1 FROM usuarios WHERE email = ?', \r\n      [userData.email]\r\n    );\r\n    \r\n    if (existing.values.length > 0) {\r\n      throw new Error('El email ya está registrado');\r\n    }\r\n\r\n    const result = await db.run(\r\n      `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      [\r\n        userData.nombre, \r\n        userData.email, \r\n        userData.password, \r\n        userData.rol, \r\n        new Date().toISOString()\r\n      ]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1'\r\n    );\r\n    return result.values.length > 0 ? result.values[0] : null;\r\n  });\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n  return withDB(async (db) => {\r\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n  });\r\n};\r\n\r\n// Operaciones para pacientes\r\nexport const getPacientes = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query('SELECT * FROM pacientes');\r\n    return result.values || [];\r\n  });\r\n};\r\n\r\nexport const addPaciente = async (paciente) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.run(\r\n      'INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)',\r\n      [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\n// Operaciones para citas\r\nexport const getCitas = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(`\r\n      SELECT c.*, p.nombre as paciente_nombre \r\n      FROM citas c\r\n      LEFT JOIN pacientes p ON c.paciente_id = p.id\r\n    `);\r\n    return result.values || [];\r\n  });\r\n};\r\n\r\nexport const addCita = async (cita) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.run(\r\n      `INSERT INTO citas (paciente_id, fecha, hora, motivo)\r\n       VALUES (?, ?, ?, ?)`,\r\n      [cita.patientId, cita.date, cita.time, cita.reason]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\n// Función para desarrollo: resetear DB\r\nexport const resetDB = async () => {\r\n  if (!isNative) return;\r\n  \r\n  try {\r\n    await sqlite.deleteDatabase({ database: 'vidawasi_db' });\r\n    dbInstance = null;\r\n    console.log('Base de datos reiniciada');\r\n  } catch (error) {\r\n    console.error('Error al resetear DB:', error);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}