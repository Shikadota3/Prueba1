{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nimport { Capacitor } from '@capacitor/core';\n\n// Configuración común\nconst DB_CONFIG = {\n  name: 'vidawasi_db',\n  version: 1,\n  encryption: false,\n  mode: 'no-encryption'\n};\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\n\n// ==================== MOCK PARA NAVEGADOR ====================\nconst createWebDB = () => {\n  console.log('Inicializando base de datos virtual para navegador');\n  let data = {\n    usuarios: [{\n      id: 1,\n      nombre: 'Admin Local',\n      email: 'admin@vidawasi.com',\n      password: 'admin123',\n      rol: 'administracion',\n      registrado_en: new Date().toISOString(),\n      is_logged_in: 1\n    }],\n    pacientes: [],\n    citas: []\n  };\n  return {\n    execute: async sql => {\n      if (sql.includes('CREATE TABLE')) return;\n      console.log('Ejecutando (mock):', sql);\n    },\n    query: async (sql, params) => {\n      var _sql$match;\n      // Autenticación\n      if (sql.includes('SELECT * FROM usuarios WHERE email')) {\n        const user = data.usuarios.find(u => u.email === params[0] && u.password === params[1]);\n        return {\n          values: user ? [user] : []\n        };\n      }\n\n      // Otras consultas\n      const table = (_sql$match = sql.match(/FROM (\\w+)/i)) === null || _sql$match === void 0 ? void 0 : _sql$match[1];\n      return {\n        values: table ? data[table] || [] : []\n      };\n    },\n    run: async (sql, params) => {\n      var _sql$match2;\n      const table = (_sql$match2 = sql.match(/INSERT INTO (\\w+)/i)) === null || _sql$match2 === void 0 ? void 0 : _sql$match2[1];\n      if (table) {\n        const newId = Date.now();\n        data[table].push({\n          ...params,\n          id: newId\n        });\n        return {\n          lastId: newId,\n          changes: 1\n        };\n      }\n      return {\n        changes: 0\n      };\n    },\n    close: async () => {},\n    isConnected: async () => ({\n      connected: true\n    }),\n    // Solo para desarrollo\n    _getData: () => data,\n    _resetData: () => {\n      data = {\n        usuarios: [],\n        pacientes: [],\n        citas: []\n      };\n    }\n  };\n};\n\n// ==================== IMPLEMENTACIÓN NATIVA ====================\nconst initializeNativeDB = async () => {\n  var _adminExists$values;\n  dbInstance = await sqlite.createConnection(DB_CONFIG);\n  await dbInstance.open();\n  if (!(await dbInstance.isConnected()).connected) {\n    throw new Error('Conexión fallida');\n  }\n\n  // Creación de tablas\n  await dbInstance.executeTransaction([{\n    statement: `CREATE TABLE IF NOT EXISTS usuarios (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\n        registrado_en TEXT NOT NULL,\n        is_logged_in BOOLEAN DEFAULT 0\n      )`\n  }, {\n    statement: `CREATE TABLE IF NOT EXISTS pacientes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        edad INTEGER,\n        diagnostico TEXT,\n        hemoglobina REAL,\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\n      )`\n  }, {\n    statement: `CREATE TABLE IF NOT EXISTS citas (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        paciente_id INTEGER,\n        fecha TEXT NOT NULL,\n        hora TEXT NOT NULL,\n        motivo TEXT,\n        estado TEXT DEFAULT 'pendiente',\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\n      )`\n  }]);\n\n  // Datos iniciales\n  const adminExists = await dbInstance.query('SELECT 1 FROM usuarios WHERE email = ?', ['admin@vidawasi.com']);\n  if (!((_adminExists$values = adminExists.values) !== null && _adminExists$values !== void 0 && _adminExists$values.length)) {\n    await dbInstance.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n       VALUES (?, ?, ?, ?, ?)`, ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]);\n  }\n  return dbInstance;\n};\n\n// ==================== INTERFAZ PÚBLICA ====================\nexport const initDB = async () => {\n  try {\n    if (dbInstance) return dbInstance;\n    if (Capacitor.isNativePlatform()) {\n      dbInstance = await initializeNativeDB();\n    } else {\n      dbInstance = createWebDB();\n    }\n    console.log(`Base de datos ${Capacitor.isNativePlatform() ? 'nativa' : 'virtual'} lista`);\n    return dbInstance;\n  } catch (error) {\n    console.error('Error al inicializar DB:', error);\n    throw new Error(`Error de conexión: ${error.message}`);\n  }\n};\n\n// Operaciones CRUD (manteniendo tu implementación actual de withDB)\nexport const loginUser = async (email, password) => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1', [email, password]);\n    if (result.values.length > 0) {\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\n      return result.values[0];\n    }\n    return null;\n  });\n};\n\n// ... (mantén tus otras operaciones CRUD igual)\n\n// ==================== HERRAMIENTAS DE DESARROLLO ====================\nexport const devTools = {\n  exportData: async () => {\n    if (Capacitor.isNativePlatform()) {\n      const [users, patients, appointments] = await Promise.all([dbInstance.query('SELECT * FROM usuarios'), dbInstance.query('SELECT * FROM pacientes'), dbInstance.query('SELECT * FROM citas')]);\n      return {\n        usuarios: users.values,\n        pacientes: patients.values,\n        citas: appointments.values\n      };\n    } else {\n      return dbInstance._getData();\n    }\n  },\n  importData: async data => {\n    if (Capacitor.isNativePlatform()) {\n      await dbInstance.executeTransaction([{\n        statement: 'DELETE FROM usuarios'\n      }, {\n        statement: 'DELETE FROM pacientes'\n      }, {\n        statement: 'DELETE FROM citas'\n      }]);\n      for (const user of data.usuarios) {\n        await dbInstance.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n           VALUES (?, ?, ?, ?, ?)`, [user.nombre, user.email, user.password, user.rol, user.registrado_en]);\n      }\n      // Similar para otras tablas\n    } else {\n      dbInstance._resetData();\n      Object.assign(dbInstance._getData(), data);\n    }\n  }\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","Capacitor","DB_CONFIG","name","version","encryption","mode","sqlite","dbInstance","createWebDB","console","log","data","usuarios","id","nombre","email","password","rol","registrado_en","Date","toISOString","is_logged_in","pacientes","citas","execute","sql","includes","query","params","_sql$match","user","find","u","values","table","match","run","_sql$match2","newId","now","push","lastId","changes","close","isConnected","connected","_getData","_resetData","initializeNativeDB","_adminExists$values","createConnection","open","Error","executeTransaction","statement","adminExists","length","initDB","isNativePlatform","error","message","loginUser","withDB","db","result","devTools","exportData","users","patients","appointments","Promise","all","importData","Object","assign"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\n// Configuración común\r\nconst DB_CONFIG = {\r\n  name: 'vidawasi_db',\r\n  version: 1,\r\n  encryption: false,\r\n  mode: 'no-encryption'\r\n};\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\n// ==================== MOCK PARA NAVEGADOR ====================\r\nconst createWebDB = () => {\r\n  console.log('Inicializando base de datos virtual para navegador');\r\n  \r\n  let data = {\r\n    usuarios: [\r\n      {\r\n        id: 1,\r\n        nombre: 'Admin Local',\r\n        email: 'admin@vidawasi.com',\r\n        password: 'admin123',\r\n        rol: 'administracion',\r\n        registrado_en: new Date().toISOString(),\r\n        is_logged_in: 1\r\n      }\r\n    ],\r\n    pacientes: [],\r\n    citas: []\r\n  };\r\n\r\n  return {\r\n    execute: async (sql) => {\r\n      if (sql.includes('CREATE TABLE')) return;\r\n      console.log('Ejecutando (mock):', sql);\r\n    },\r\n    \r\n    query: async (sql, params) => {\r\n      // Autenticación\r\n      if (sql.includes('SELECT * FROM usuarios WHERE email')) {\r\n        const user = data.usuarios.find(u => \r\n          u.email === params[0] && u.password === params[1]\r\n        );\r\n        return { values: user ? [user] : [] };\r\n      }\r\n      \r\n      // Otras consultas\r\n      const table = sql.match(/FROM (\\w+)/i)?.[1];\r\n      return { values: table ? data[table] || [] : [] };\r\n    },\r\n\r\n    run: async (sql, params) => {\r\n      const table = sql.match(/INSERT INTO (\\w+)/i)?.[1];\r\n      if (table) {\r\n        const newId = Date.now();\r\n        data[table].push({ ...params, id: newId });\r\n        return { lastId: newId, changes: 1 };\r\n      }\r\n      return { changes: 0 };\r\n    },\r\n\r\n    close: async () => {},\r\n    isConnected: async () => ({ connected: true }),\r\n\r\n    // Solo para desarrollo\r\n    _getData: () => data,\r\n    _resetData: () => {\r\n      data = { usuarios: [], pacientes: [], citas: [] };\r\n    }\r\n  };\r\n};\r\n\r\n// ==================== IMPLEMENTACIÓN NATIVA ====================\r\nconst initializeNativeDB = async () => {\r\n  dbInstance = await sqlite.createConnection(DB_CONFIG);\r\n  await dbInstance.open();\r\n\r\n  if (!(await dbInstance.isConnected()).connected) {\r\n    throw new Error('Conexión fallida');\r\n  }\r\n\r\n  // Creación de tablas\r\n  await dbInstance.executeTransaction([\r\n    {\r\n      statement: `CREATE TABLE IF NOT EXISTS usuarios (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        email TEXT UNIQUE NOT NULL,\r\n        password TEXT NOT NULL,\r\n        rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\r\n        registrado_en TEXT NOT NULL,\r\n        is_logged_in BOOLEAN DEFAULT 0\r\n      )`\r\n    },\r\n    {\r\n      statement: `CREATE TABLE IF NOT EXISTS pacientes (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        edad INTEGER,\r\n        diagnostico TEXT,\r\n        hemoglobina REAL,\r\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\r\n      )`\r\n    },\r\n    {\r\n      statement: `CREATE TABLE IF NOT EXISTS citas (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        paciente_id INTEGER,\r\n        fecha TEXT NOT NULL,\r\n        hora TEXT NOT NULL,\r\n        motivo TEXT,\r\n        estado TEXT DEFAULT 'pendiente',\r\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\r\n      )`\r\n    }\r\n  ]);\r\n\r\n  // Datos iniciales\r\n  const adminExists = await dbInstance.query(\r\n    'SELECT 1 FROM usuarios WHERE email = ?',\r\n    ['admin@vidawasi.com']\r\n  );\r\n  \r\n  if (!adminExists.values?.length) {\r\n    await dbInstance.run(\r\n      `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]\r\n    );\r\n  }\r\n\r\n  return dbInstance;\r\n};\r\n\r\n// ==================== INTERFAZ PÚBLICA ====================\r\nexport const initDB = async () => {\r\n  try {\r\n    if (dbInstance) return dbInstance;\r\n\r\n    if (Capacitor.isNativePlatform()) {\r\n      dbInstance = await initializeNativeDB();\r\n    } else {\r\n      dbInstance = createWebDB();\r\n    }\r\n\r\n    console.log(`Base de datos ${Capacitor.isNativePlatform() ? 'nativa' : 'virtual'} lista`);\r\n    return dbInstance;\r\n\r\n  } catch (error) {\r\n    console.error('Error al inicializar DB:', error);\r\n    throw new Error(`Error de conexión: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Operaciones CRUD (manteniendo tu implementación actual de withDB)\r\nexport const loginUser = async (email, password) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1',\r\n      [email, password]\r\n    );\r\n    \r\n    if (result.values.length > 0) {\r\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\r\n      return result.values[0];\r\n    }\r\n    return null;\r\n  });\r\n};\r\n\r\n// ... (mantén tus otras operaciones CRUD igual)\r\n\r\n// ==================== HERRAMIENTAS DE DESARROLLO ====================\r\nexport const devTools = {\r\n  exportData: async () => {\r\n    if (Capacitor.isNativePlatform()) {\r\n      const [users, patients, appointments] = await Promise.all([\r\n        dbInstance.query('SELECT * FROM usuarios'),\r\n        dbInstance.query('SELECT * FROM pacientes'),\r\n        dbInstance.query('SELECT * FROM citas')\r\n      ]);\r\n      return {\r\n        usuarios: users.values,\r\n        pacientes: patients.values,\r\n        citas: appointments.values\r\n      };\r\n    } else {\r\n      return dbInstance._getData();\r\n    }\r\n  },\r\n\r\n  importData: async (data) => {\r\n    if (Capacitor.isNativePlatform()) {\r\n      await dbInstance.executeTransaction([\r\n        { statement: 'DELETE FROM usuarios' },\r\n        { statement: 'DELETE FROM pacientes' },\r\n        { statement: 'DELETE FROM citas' }\r\n      ]);\r\n      \r\n      for (const user of data.usuarios) {\r\n        await dbInstance.run(\r\n          `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n           VALUES (?, ?, ?, ?, ?)`,\r\n          [user.nombre, user.email, user.password, user.rol, user.registrado_en]\r\n        );\r\n      }\r\n      // Similar para otras tablas\r\n    } else {\r\n      dbInstance._resetData();\r\n      Object.assign(dbInstance._getData(), data);\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}