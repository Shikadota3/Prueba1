{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nexport class CapacitorSQLiteWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.jeepSqliteElement = null;\n    this.isWebStoreOpen = false;\n  }\n  async initWebStore() {\n    await customElements.whenDefined('jeep-sqlite');\n    this.jeepSqliteElement = document.querySelector('jeep-sqlite');\n    this.ensureJeepSqliteIsAvailable();\n    this.jeepSqliteElement.addEventListener('jeepSqliteImportProgress', event => {\n      this.notifyListeners('sqliteImportProgressEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteExportProgress', event => {\n      this.notifyListeners('sqliteExportProgressEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteHTTPRequestEnded', event => {\n      this.notifyListeners('sqliteHTTPRequestEndedEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqlitePickDatabaseEnded', event => {\n      this.notifyListeners('sqlitePickDatabaseEndedEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteSaveDatabaseToDisk', event => {\n      this.notifyListeners('sqliteSaveDatabaseToDiskEvent', event.detail);\n    });\n    if (!this.isWebStoreOpen) {\n      this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n    }\n    return;\n  }\n  async saveToStore(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.saveToStore(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async getFromLocalDiskToStore(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.getFromLocalDiskToStore(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async saveToLocalDisk(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.saveToLocalDisk(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async echo(options) {\n    this.ensureJeepSqliteIsAvailable();\n    const echoResult = await this.jeepSqliteElement.echo(options);\n    return echoResult;\n  }\n  async createConnection(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.createConnection(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async open(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.open(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async closeConnection(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.closeConnection(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async getVersion(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const versionResult = await this.jeepSqliteElement.getVersion(options);\n      return versionResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async checkConnectionsConsistency(options) {\n    this.ensureJeepSqliteIsAvailable();\n    try {\n      const consistencyResult = await this.jeepSqliteElement.checkConnectionsConsistency(options);\n      return consistencyResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async close(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.close(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async beginTransaction(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const changes = await this.jeepSqliteElement.beginTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async commitTransaction(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const changes = await this.jeepSqliteElement.commitTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async rollbackTransaction(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const changes = await this.jeepSqliteElement.rollbackTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isTransactionActive(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const result = await this.jeepSqliteElement.isTransactionActive(options);\n      return result;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async getTableList(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const tableListResult = await this.jeepSqliteElement.getTableList(options);\n      return tableListResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async execute(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const executeResult = await this.jeepSqliteElement.execute(options);\n      return executeResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async executeSet(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const executeResult = await this.jeepSqliteElement.executeSet(options);\n      return executeResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async run(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const runResult = await this.jeepSqliteElement.run(options);\n      return runResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async query(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const queryResult = await this.jeepSqliteElement.query(options);\n      return queryResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isDBExists(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const dbExistsResult = await this.jeepSqliteElement.isDBExists(options);\n      return dbExistsResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isDBOpen(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const isDBOpenResult = await this.jeepSqliteElement.isDBOpen(options);\n      return isDBOpenResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isDatabase(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const isDatabaseResult = await this.jeepSqliteElement.isDatabase(options);\n      return isDatabaseResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isTableExists(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const tableExistsResult = await this.jeepSqliteElement.isTableExists(options);\n      return tableExistsResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async deleteDatabase(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.deleteDatabase(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isJsonValid(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const isJsonValidResult = await this.jeepSqliteElement.isJsonValid(options);\n      return isJsonValidResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async importFromJson(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const importFromJsonResult = await this.jeepSqliteElement.importFromJson(options);\n      return importFromJsonResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async exportToJson(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const exportToJsonResult = await this.jeepSqliteElement.exportToJson(options);\n      return exportToJsonResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async createSyncTable(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const createSyncTableResult = await this.jeepSqliteElement.createSyncTable(options);\n      return createSyncTableResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async setSyncDate(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.setSyncDate(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async getSyncDate(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const getSyncDateResult = await this.jeepSqliteElement.getSyncDate(options);\n      return getSyncDateResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async deleteExportedRows(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.deleteExportedRows(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async addUpgradeStatement(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.addUpgradeStatement(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async copyFromAssets(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.copyFromAssets(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async getFromHTTPRequest(options) {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.getFromHTTPRequest(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async getDatabaseList() {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      const databaseListResult = await this.jeepSqliteElement.getDatabaseList();\n      return databaseListResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  /**\n   * Checks if the `jeep-sqlite` element is present in the DOM.\n   * If it's not in the DOM, this method throws an Error.\n   *\n   * Attention: This will always fail, if the `intWebStore()` method wasn't called before.\n   */\n  ensureJeepSqliteIsAvailable() {\n    if (this.jeepSqliteElement === null) {\n      throw new Error(`The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.`);\n    }\n  }\n  ensureWebstoreIsOpen() {\n    if (!this.isWebStoreOpen) {\n      /**\n       * if (!this.isWebStoreOpen)\n        this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n       */\n      throw new Error('WebStore is not open yet. You have to call \"initWebStore()\" first.');\n    }\n  }\n  ////////////////////////////////////\n  ////// UNIMPLEMENTED METHODS\n  ////////////////////////////////////\n  async getUrl() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async getMigratableDbList(options) {\n    console.log('getMigratableDbList', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async addSQLiteSuffix(options) {\n    console.log('addSQLiteSuffix', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async deleteOldDatabases(options) {\n    console.log('deleteOldDatabases', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async moveDatabasesAndAddSuffix(options) {\n    console.log('moveDatabasesAndAddSuffix', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async isSecretStored() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async setEncryptionSecret(options) {\n    console.log('setEncryptionSecret', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async changeEncryptionSecret(options) {\n    console.log('changeEncryptionSecret', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async clearEncryptionSecret() {\n    console.log('clearEncryptionSecret');\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async checkEncryptionSecret(options) {\n    console.log('checkEncryptionPassPhrase', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async getNCDatabasePath(options) {\n    console.log('getNCDatabasePath', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async createNCConnection(options) {\n    console.log('createNCConnection', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async closeNCConnection(options) {\n    console.log('closeNCConnection', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async isNCDatabase(options) {\n    console.log('isNCDatabase', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async isDatabaseEncrypted(options) {\n    console.log('isDatabaseEncrypted', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async isInConfigEncryption() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async isInConfigBiometricAuth() {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async loadExtension(options) {\n    console.log('loadExtension', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async enableLoadExtension(options) {\n    console.log('enableLoadExtension', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n}","map":{"version":3,"names":["WebPlugin","CapacitorSQLiteWeb","constructor","jeepSqliteElement","isWebStoreOpen","initWebStore","customElements","whenDefined","document","querySelector","ensureJeepSqliteIsAvailable","addEventListener","event","notifyListeners","detail","isStoreOpen","saveToStore","options","ensureWebstoreIsOpen","err","Error","getFromLocalDiskToStore","saveToLocalDisk","echo","echoResult","createConnection","open","closeConnection","getVersion","versionResult","checkConnectionsConsistency","consistencyResult","close","beginTransaction","changes","commitTransaction","rollbackTransaction","isTransactionActive","result","getTableList","tableListResult","execute","executeResult","executeSet","run","runResult","query","queryResult","isDBExists","dbExistsResult","isDBOpen","isDBOpenResult","isDatabase","isDatabaseResult","isTableExists","tableExistsResult","deleteDatabase","isJsonValid","isJsonValidResult","importFromJson","importFromJsonResult","exportToJson","exportToJsonResult","createSyncTable","createSyncTableResult","setSyncDate","getSyncDate","getSyncDateResult","deleteExportedRows","addUpgradeStatement","copyFromAssets","getFromHTTPRequest","getDatabaseList","databaseListResult","getUrl","unimplemented","getMigratableDbList","console","log","addSQLiteSuffix","deleteOldDatabases","moveDatabasesAndAddSuffix","isSecretStored","setEncryptionSecret","changeEncryptionSecret","clearEncryptionSecret","checkEncryptionSecret","getNCDatabasePath","createNCConnection","closeNCConnection","isNCDatabase","isDatabaseEncrypted","isInConfigEncryption","isInConfigBiometricAuth","loadExtension","enableLoadExtension"],"sources":["C:\\RAUL\\TRABAJOS\\Aplicativo Vidawasi v3.0\\project\\node_modules\\@capacitor-community\\sqlite\\src\\web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  CapacitorSQLitePlugin,\n  capConnectionOptions,\n  capAllConnectionsOptions,\n  capChangeSecretOptions,\n  capEchoOptions,\n  capEchoResult,\n  capNCConnectionOptions,\n  capNCDatabasePathOptions,\n  capNCDatabasePathResult,\n  capNCOptions,\n  capSetSecretOptions,\n  capSQLiteChanges,\n  capSQLiteExecuteOptions,\n  capSQLiteExportOptions,\n  capSQLiteFromAssetsOptions,\n  capSQLiteHTTPOptions,\n  capSQLiteLocalDiskOptions,\n  capSQLiteImportOptions,\n  capSQLiteJson,\n  capSQLiteOptions,\n  capSQLitePathOptions,\n  capSQLiteQueryOptions,\n  capSQLiteResult,\n  capSQLiteRunOptions,\n  capSQLiteSetOptions,\n  capSQLiteSyncDate,\n  capSQLiteSyncDateOptions,\n  capSQLiteTableOptions,\n  capSQLiteUpgradeOptions,\n  capSQLiteUrl,\n  capSQLiteValues,\n  capVersionResult,\n  capSQLiteExtensionPath,\n  capSQLiteExtensionEnable,\n} from './definitions';\n\nexport class CapacitorSQLiteWeb extends WebPlugin implements CapacitorSQLitePlugin {\n  private jeepSqliteElement: any = null;\n  private isWebStoreOpen = false;\n\n  async initWebStore(): Promise<void> {\n    await customElements.whenDefined('jeep-sqlite');\n\n    this.jeepSqliteElement = document.querySelector('jeep-sqlite');\n    this.ensureJeepSqliteIsAvailable();\n\n    this.jeepSqliteElement.addEventListener('jeepSqliteImportProgress', (event: CustomEvent) => {\n      this.notifyListeners('sqliteImportProgressEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteExportProgress', (event: CustomEvent) => {\n      this.notifyListeners('sqliteExportProgressEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteHTTPRequestEnded', (event: CustomEvent) => {\n      this.notifyListeners('sqliteHTTPRequestEndedEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqlitePickDatabaseEnded', (event: CustomEvent) => {\n      this.notifyListeners('sqlitePickDatabaseEndedEvent', event.detail);\n    });\n    this.jeepSqliteElement.addEventListener('jeepSqliteSaveDatabaseToDisk', (event: CustomEvent) => {\n      this.notifyListeners('sqliteSaveDatabaseToDiskEvent', event.detail);\n    });\n\n    if (!this.isWebStoreOpen) {\n      this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n    }\n\n    return;\n  }\n\n  async saveToStore(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.saveToStore(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async getFromLocalDiskToStore(options: capSQLiteLocalDiskOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.getFromLocalDiskToStore(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async saveToLocalDisk(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.saveToLocalDisk(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async echo(options: capEchoOptions): Promise<capEchoResult> {\n    this.ensureJeepSqliteIsAvailable();\n\n    const echoResult = await this.jeepSqliteElement.echo(options);\n    return echoResult;\n  }\n\n  async createConnection(options: capConnectionOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.createConnection(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async open(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.open(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async closeConnection(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.closeConnection(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getVersion(options: capSQLiteOptions): Promise<capVersionResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const versionResult: capVersionResult = await this.jeepSqliteElement.getVersion(options);\n      return versionResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async checkConnectionsConsistency(options: capAllConnectionsOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n\n    try {\n      const consistencyResult: capSQLiteResult = await this.jeepSqliteElement.checkConnectionsConsistency(options);\n      return consistencyResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async close(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.close(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async beginTransaction(options: capSQLiteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const changes: capSQLiteChanges = await this.jeepSqliteElement.beginTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async commitTransaction(options: capSQLiteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const changes: capSQLiteChanges = await this.jeepSqliteElement.commitTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async rollbackTransaction(options: capSQLiteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const changes: capSQLiteChanges = await this.jeepSqliteElement.rollbackTransaction(options);\n      return changes;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isTransactionActive(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const result: capSQLiteResult = await this.jeepSqliteElement.isTransactionActive(options);\n      return result;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getTableList(options: capSQLiteOptions): Promise<capSQLiteValues> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const tableListResult: capSQLiteValues = await this.jeepSqliteElement.getTableList(options);\n      return tableListResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async execute(options: capSQLiteExecuteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const executeResult: capSQLiteChanges = await this.jeepSqliteElement.execute(options);\n      return executeResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async executeSet(options: capSQLiteSetOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const executeResult: capSQLiteChanges = await this.jeepSqliteElement.executeSet(options);\n      return executeResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async run(options: capSQLiteRunOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const runResult: capSQLiteChanges = await this.jeepSqliteElement.run(options);\n      return runResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async query(options: capSQLiteQueryOptions): Promise<capSQLiteValues> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const queryResult: capSQLiteValues = await this.jeepSqliteElement.query(options);\n      return queryResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isDBExists(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const dbExistsResult: capSQLiteResult = await this.jeepSqliteElement.isDBExists(options);\n      return dbExistsResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async isDBOpen(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const isDBOpenResult: capSQLiteResult = await this.jeepSqliteElement.isDBOpen(options);\n      return isDBOpenResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async isDatabase(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const isDatabaseResult: capSQLiteResult = await this.jeepSqliteElement.isDatabase(options);\n      return isDatabaseResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async isTableExists(options: capSQLiteTableOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const tableExistsResult = await this.jeepSqliteElement.isTableExists(options);\n      return tableExistsResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async deleteDatabase(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.deleteDatabase(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async isJsonValid(options: capSQLiteImportOptions): Promise<capSQLiteResult> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const isJsonValidResult = await this.jeepSqliteElement.isJsonValid(options);\n      return isJsonValidResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async importFromJson(options: capSQLiteImportOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const importFromJsonResult: capSQLiteChanges = await this.jeepSqliteElement.importFromJson(options);\n      return importFromJsonResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async exportToJson(options: capSQLiteExportOptions): Promise<capSQLiteJson> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const exportToJsonResult: capSQLiteJson = await this.jeepSqliteElement.exportToJson(options);\n      return exportToJsonResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async createSyncTable(options: capSQLiteOptions): Promise<capSQLiteChanges> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const createSyncTableResult: capSQLiteChanges = await this.jeepSqliteElement.createSyncTable(options);\n      return createSyncTableResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async setSyncDate(options: capSQLiteSyncDateOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.setSyncDate(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getSyncDate(options: capSQLiteOptions): Promise<capSQLiteSyncDate> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const getSyncDateResult: capSQLiteSyncDate = await this.jeepSqliteElement.getSyncDate(options);\n      return getSyncDateResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n  async deleteExportedRows(options: capSQLiteOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n    try {\n      await this.jeepSqliteElement.deleteExportedRows(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async addUpgradeStatement(options: capSQLiteUpgradeOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.addUpgradeStatement(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async copyFromAssets(options: capSQLiteFromAssetsOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.copyFromAssets(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getFromHTTPRequest(options: capSQLiteHTTPOptions): Promise<void> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      await this.jeepSqliteElement.getFromHTTPRequest(options);\n      return;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  async getDatabaseList(): Promise<capSQLiteValues> {\n    this.ensureJeepSqliteIsAvailable();\n    this.ensureWebstoreIsOpen();\n\n    try {\n      const databaseListResult: capSQLiteValues = await this.jeepSqliteElement.getDatabaseList();\n      return databaseListResult;\n    } catch (err) {\n      throw new Error(`${err}`);\n    }\n  }\n\n  /**\n   * Checks if the `jeep-sqlite` element is present in the DOM.\n   * If it's not in the DOM, this method throws an Error.\n   *\n   * Attention: This will always fail, if the `intWebStore()` method wasn't called before.\n   */\n  private ensureJeepSqliteIsAvailable() {\n    if (this.jeepSqliteElement === null) {\n      throw new Error(\n        `The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.`,\n      );\n    }\n  }\n\n  private ensureWebstoreIsOpen() {\n    if (!this.isWebStoreOpen) {\n      /**\n       * if (!this.isWebStoreOpen)\n        this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n       */\n      throw new Error('WebStore is not open yet. You have to call \"initWebStore()\" first.');\n    }\n  }\n\n  ////////////////////////////////////\n  ////// UNIMPLEMENTED METHODS\n  ////////////////////////////////////\n\n  async getUrl(): Promise<capSQLiteUrl> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async getMigratableDbList(options: capSQLitePathOptions): Promise<capSQLiteValues> {\n    console.log('getMigratableDbList', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async addSQLiteSuffix(options: capSQLitePathOptions): Promise<void> {\n    console.log('addSQLiteSuffix', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async deleteOldDatabases(options: capSQLitePathOptions): Promise<void> {\n    console.log('deleteOldDatabases', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async moveDatabasesAndAddSuffix(options: capSQLitePathOptions): Promise<void> {\n    console.log('moveDatabasesAndAddSuffix', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isSecretStored(): Promise<capSQLiteResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async setEncryptionSecret(options: capSetSecretOptions): Promise<void> {\n    console.log('setEncryptionSecret', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async changeEncryptionSecret(options: capChangeSecretOptions): Promise<void> {\n    console.log('changeEncryptionSecret', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async clearEncryptionSecret(): Promise<void> {\n    console.log('clearEncryptionSecret');\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async checkEncryptionSecret(options: capSetSecretOptions): Promise<capSQLiteResult> {\n    console.log('checkEncryptionPassPhrase', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async getNCDatabasePath(options: capNCDatabasePathOptions): Promise<capNCDatabasePathResult> {\n    console.log('getNCDatabasePath', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async createNCConnection(options: capNCConnectionOptions): Promise<void> {\n    console.log('createNCConnection', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async closeNCConnection(options: capNCOptions): Promise<void> {\n    console.log('closeNCConnection', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isNCDatabase(options: capNCOptions): Promise<capSQLiteResult> {\n    console.log('isNCDatabase', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isDatabaseEncrypted(options: capSQLiteOptions): Promise<capSQLiteResult> {\n    console.log('isDatabaseEncrypted', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isInConfigEncryption(): Promise<capSQLiteResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async isInConfigBiometricAuth(): Promise<capSQLiteResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async loadExtension(options: capSQLiteExtensionPath): Promise<void> {\n    console.log('loadExtension', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async enableLoadExtension(options: capSQLiteExtensionEnable): Promise<void> {\n    console.log('enableLoadExtension', options);\n    throw this.unimplemented('Not implemented on web.');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}