{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\nexport const initDB = async () => {\n  if (!dbInstance) {\n    dbInstance = await sqlite.createConnection('vidawasi_db', false, 'no-encryption', 1, false);\n    await dbInstance.open();\n\n    // Tablas esenciales\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS pacientes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        edad INTEGER,\n        diagnostico TEXT,\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS citas (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        paciente_id INTEGER,\n        fecha TEXT NOT NULL,\n        hora TEXT NOT NULL,\n        motivo TEXT,\n        estado TEXT DEFAULT 'pendiente',\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\n      );\n    `);\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS usuarios (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        rol TEXT DEFAULT 'usuario',\n        registrado_en TEXT NOT NULL\n      );\n    `);\n  }\n  return dbInstance;\n};\n\n// Operaciones CRUD\nexport const getPacientes = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM pacientes');\n  return result.values || [];\n};\nexport const addCita = async cita => {\n  const db = await initDB();\n  const result = await db.run(`INSERT INTO citas (paciente_id, fecha, hora, motivo) \n     VALUES (?, ?, ?, ?)`, [cita.patientId, cita.date, cita.time, cita.reason]);\n  return result.lastId;\n};\nexport const getCitas = async () => {\n  const db = await initDB();\n  const result = await db.query(`\n    SELECT c.*, p.nombre as paciente_nombre \n    FROM citas c\n    LEFT JOIN pacientes p ON c.paciente_id = p.id\n  `);\n  return result.values || [];\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","sqlite","dbInstance","initDB","createConnection","open","execute","getPacientes","db","result","query","values","addCita","cita","run","patientId","date","time","reason","lastId","getCitas"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\nexport const initDB = async () => {\r\n  if (!dbInstance) {\r\n    dbInstance = await sqlite.createConnection(\r\n      'vidawasi_db',\r\n      false,\r\n      'no-encryption',\r\n      1,\r\n      false\r\n    );\r\n    await dbInstance.open();\r\n\r\n    // Tablas esenciales\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS pacientes (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        edad INTEGER,\r\n        diagnostico TEXT,\r\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\r\n      );\r\n    `);\r\n\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS citas (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        paciente_id INTEGER,\r\n        fecha TEXT NOT NULL,\r\n        hora TEXT NOT NULL,\r\n        motivo TEXT,\r\n        estado TEXT DEFAULT 'pendiente',\r\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\r\n      );\r\n    `);\r\n\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS usuarios (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        email TEXT UNIQUE NOT NULL,\r\n        password TEXT NOT NULL,\r\n        rol TEXT DEFAULT 'usuario',\r\n        registrado_en TEXT NOT NULL\r\n      );\r\n    `);\r\n  }\r\n  return dbInstance;\r\n};\r\n\r\n// Operaciones CRUD\r\nexport const getPacientes = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query('SELECT * FROM pacientes');\r\n  return result.values || [];\r\n};\r\n\r\nexport const addCita = async (cita) => {\r\n  const db = await initDB();\r\n  const result = await db.run(\r\n    `INSERT INTO citas (paciente_id, fecha, hora, motivo) \r\n     VALUES (?, ?, ?, ?)`,\r\n    [cita.patientId, cita.date, cita.time, cita.reason]\r\n  );\r\n  return result.lastId;\r\n};\r\n\r\nexport const getCitas = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query(`\r\n    SELECT c.*, p.nombre as paciente_nombre \r\n    FROM citas c\r\n    LEFT JOIN pacientes p ON c.paciente_id = p.id\r\n  `);\r\n  return result.values || [];\r\n};"],"mappings":"AAAA,SAASA,eAAe,EAAEC,gBAAgB,QAAQ,6BAA6B;AAE/E,MAAMC,MAAM,GAAG,IAAID,gBAAgB,CAACD,eAAe,CAAC;AACpD,IAAIG,UAAU;AAEd,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI,CAACD,UAAU,EAAE;IACfA,UAAU,GAAG,MAAMD,MAAM,CAACG,gBAAgB,CACxC,aAAa,EACb,KAAK,EACL,eAAe,EACf,CAAC,EACD,KACF,CAAC;IACD,MAAMF,UAAU,CAACG,IAAI,CAAC,CAAC;;IAEvB;IACA,MAAMH,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAEF,MAAMJ,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAEF,MAAMJ,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ;EACA,OAAOJ,UAAU;AACnB,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,EAAE,GAAG,MAAML,MAAM,CAAC,CAAC;EACzB,MAAMM,MAAM,GAAG,MAAMD,EAAE,CAACE,KAAK,CAAC,yBAAyB,CAAC;EACxD,OAAOD,MAAM,CAACE,MAAM,IAAI,EAAE;AAC5B,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,MAAOC,IAAI,IAAK;EACrC,MAAML,EAAE,GAAG,MAAML,MAAM,CAAC,CAAC;EACzB,MAAMM,MAAM,GAAG,MAAMD,EAAE,CAACM,GAAG,CACzB;AACJ,yBAAyB,EACrB,CAACD,IAAI,CAACE,SAAS,EAAEF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,IAAI,EAAEJ,IAAI,CAACK,MAAM,CACpD,CAAC;EACD,OAAOT,MAAM,CAACU,MAAM;AACtB,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMZ,EAAE,GAAG,MAAML,MAAM,CAAC,CAAC;EACzB,MAAMM,MAAM,GAAG,MAAMD,EAAE,CAACE,KAAK,CAAC;AAChC;AACA;AACA;AACA,GAAG,CAAC;EACF,OAAOD,MAAM,CAACE,MAAM,IAAI,EAAE;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}