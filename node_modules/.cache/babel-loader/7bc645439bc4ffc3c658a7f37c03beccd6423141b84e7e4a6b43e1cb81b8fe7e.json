{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nimport { Capacitor } from '@capacitor/core';\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\n\n/**\r\n * Inicializa la base de datos y crea las tablas si no existen\r\n */\nexport const initDB = async () => {\n  try {\n    console.log('[SQLite] Iniciando conexión...');\n\n    // 1. Verificar disponibilidad del plugin\n    if (!CapacitorSQLite || !sqlite) {\n      throw new Error('El plugin SQLite no está disponible');\n    }\n\n    // 2. Crear conexión\n    dbInstance = await sqlite.createConnection({\n      database: 'vidawasi_db',\n      encrypted: false,\n      mode: 'no-encryption',\n      readonly: false,\n      version: 1\n    });\n\n    // 3. Abrir conexión\n    await dbInstance.open();\n\n    // 4. Verificar conexión\n    const connectionCheck = await dbInstance.isConnection();\n    if (!connectionCheck.result) {\n      throw new Error('No se pudo establecer conexión con la base de datos');\n    }\n\n    // 5. Crear tablas con transacción\n    await dbInstance.beginTransaction();\n    try {\n      // Tabla de usuarios\n      await dbInstance.execute(`\n        CREATE TABLE IF NOT EXISTS usuarios (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          nombre TEXT NOT NULL,\n          email TEXT UNIQUE NOT NULL,\n          password TEXT NOT NULL,\n          rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\n          registrado_en TEXT NOT NULL,\n          is_logged_in BOOLEAN DEFAULT 0\n        );\n      `);\n\n      // Tabla de pacientes\n      await dbInstance.execute(`\n        CREATE TABLE IF NOT EXISTS pacientes (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          nombre TEXT NOT NULL,\n          edad INTEGER,\n          diagnostico TEXT,\n          hemoglobina REAL,\n          fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n\n      // Tabla de citas\n      await dbInstance.execute(`\n        CREATE TABLE IF NOT EXISTS citas (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          paciente_id INTEGER,\n          fecha TEXT NOT NULL,\n          hora TEXT NOT NULL,\n          motivo TEXT,\n          estado TEXT DEFAULT 'pendiente',\n          FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\n        );\n      `);\n\n      // 6. Insertar datos iniciales\n      await seedInitialData(dbInstance);\n      await dbInstance.commitTransaction();\n      console.log('[SQLite] Base de datos inicializada correctamente');\n      return dbInstance;\n    } catch (txError) {\n      await dbInstance.rollbackTransaction();\n      throw txError;\n    }\n  } catch (error) {\n    console.error('[SQLite] Error en initDB:', error);\n    throw new Error(`Error al conectar con la base de datos: ${error.message}`);\n  }\n};\n\n/**\r\n * Inserta datos iniciales (usuario admin)\r\n */\nconst seedInitialData = async db => {\n  try {\n    const adminExists = await db.query('SELECT 1 FROM usuarios WHERE email = ?', ['admin@vidawasi.com']);\n    if (adminExists.values.length === 0) {\n      await db.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n         VALUES (?, ?, ?, ?, ?)`, ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]);\n      console.log('[SQLite] Usuario admin creado');\n    }\n  } catch (error) {\n    console.error('[SQLite] Error en seedInitialData:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Función wrapper para manejo seguro de operaciones\r\n */\nconst withDB = async operation => {\n  try {\n    const db = await initDB();\n    return await operation(db);\n  } catch (error) {\n    console.error('[SQLite] Error en operación:', error);\n    throw error;\n  }\n};\n\n// ---- Operaciones de Autenticación ----\nexport const loginUser = async (email, password) => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1', [email, password]);\n    if (result.values.length > 0) {\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\n      return result.values[0];\n    }\n    return null;\n  });\n};\nexport const registerUser = async userData => {\n  return withDB(async db => {\n    const existing = await db.query('SELECT 1 FROM usuarios WHERE email = ?', [userData.email]);\n    if (existing.values.length > 0) {\n      throw new Error('El email ya está registrado');\n    }\n    const result = await db.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n       VALUES (?, ?, ?, ?, ?)`, [userData.nombre, userData.email, userData.password, userData.rol, new Date().toISOString()]);\n    return result.lastId;\n  });\n};\nexport const getCurrentUser = async () => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\n    return result.values.length > 0 ? result.values[0] : null;\n  });\n};\nexport const logoutUser = async () => {\n  return withDB(async db => {\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\n  });\n};\n\n// ---- Operaciones de Pacientes ----\nexport const getPacientes = async () => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM pacientes');\n    return result.values || [];\n  });\n};\nexport const addPaciente = async paciente => {\n  return withDB(async db => {\n    const result = await db.run('INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)', [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]);\n    return result.lastId;\n  });\n};\n\n// ---- Operaciones de Citas ----\nexport const getCitas = async () => {\n  return withDB(async db => {\n    const result = await db.query(`\n      SELECT c.*, p.nombre as paciente_nombre \n      FROM citas c\n      LEFT JOIN pacientes p ON c.paciente_id = p.id\n    `);\n    return result.values || [];\n  });\n};\nexport const addCita = async cita => {\n  return withDB(async db => {\n    const result = await db.run(`INSERT INTO citas (paciente_id, fecha, hora, motivo)\n       VALUES (?, ?, ?, ?)`, [cita.patientId, cita.date, cita.time, cita.reason]);\n    return result.lastId;\n  });\n};\n\n/**\r\n * Función para desarrollo: Reinicia la base de datos\r\n */\nexport const resetDB = async () => {\n  if (!Capacitor.isNativePlatform()) {\n    console.warn('resetDB solo disponible en plataformas nativas');\n    return;\n  }\n  try {\n    await sqlite.deleteDatabase({\n      database: 'vidawasi_db'\n    });\n    dbInstance = null;\n    console.log('[SQLite] Base de datos reiniciada');\n  } catch (error) {\n    console.error('[SQLite] Error al resetear DB:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","Capacitor","sqlite","dbInstance","initDB","console","log","Error","createConnection","database","encrypted","mode","readonly","version","open","connectionCheck","isConnection","result","beginTransaction","execute","seedInitialData","commitTransaction","txError","rollbackTransaction","error","message","db","adminExists","query","values","length","run","Date","toISOString","withDB","operation","loginUser","email","password","id","registerUser","userData","existing","nombre","rol","lastId","getCurrentUser","logoutUser","getPacientes","addPaciente","paciente","edad","diagnostico","hemoglobina","getCitas","addCita","cita","patientId","date","time","reason","resetDB","isNativePlatform","warn","deleteDatabase"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\n/**\r\n * Inicializa la base de datos y crea las tablas si no existen\r\n */\r\nexport const initDB = async () => {\r\n  try {\r\n    console.log('[SQLite] Iniciando conexión...');\r\n    \r\n    // 1. Verificar disponibilidad del plugin\r\n    if (!CapacitorSQLite || !sqlite) {\r\n      throw new Error('El plugin SQLite no está disponible');\r\n    }\r\n\r\n    // 2. Crear conexión\r\n    dbInstance = await sqlite.createConnection({\r\n      database: 'vidawasi_db',\r\n      encrypted: false,\r\n      mode: 'no-encryption',\r\n      readonly: false,\r\n      version: 1\r\n    });\r\n\r\n    // 3. Abrir conexión\r\n    await dbInstance.open();\r\n\r\n    // 4. Verificar conexión\r\n    const connectionCheck = await dbInstance.isConnection();\r\n    if (!connectionCheck.result) {\r\n      throw new Error('No se pudo establecer conexión con la base de datos');\r\n    }\r\n\r\n    // 5. Crear tablas con transacción\r\n    await dbInstance.beginTransaction();\r\n    try {\r\n      // Tabla de usuarios\r\n      await dbInstance.execute(`\r\n        CREATE TABLE IF NOT EXISTS usuarios (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          nombre TEXT NOT NULL,\r\n          email TEXT UNIQUE NOT NULL,\r\n          password TEXT NOT NULL,\r\n          rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\r\n          registrado_en TEXT NOT NULL,\r\n          is_logged_in BOOLEAN DEFAULT 0\r\n        );\r\n      `);\r\n\r\n      // Tabla de pacientes\r\n      await dbInstance.execute(`\r\n        CREATE TABLE IF NOT EXISTS pacientes (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          nombre TEXT NOT NULL,\r\n          edad INTEGER,\r\n          diagnostico TEXT,\r\n          hemoglobina REAL,\r\n          fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\r\n        );\r\n      `);\r\n\r\n      // Tabla de citas\r\n      await dbInstance.execute(`\r\n        CREATE TABLE IF NOT EXISTS citas (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          paciente_id INTEGER,\r\n          fecha TEXT NOT NULL,\r\n          hora TEXT NOT NULL,\r\n          motivo TEXT,\r\n          estado TEXT DEFAULT 'pendiente',\r\n          FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\r\n        );\r\n      `);\r\n\r\n      // 6. Insertar datos iniciales\r\n      await seedInitialData(dbInstance);\r\n      \r\n      await dbInstance.commitTransaction();\r\n      console.log('[SQLite] Base de datos inicializada correctamente');\r\n      return dbInstance;\r\n    } catch (txError) {\r\n      await dbInstance.rollbackTransaction();\r\n      throw txError;\r\n    }\r\n  } catch (error) {\r\n    console.error('[SQLite] Error en initDB:', error);\r\n    throw new Error(`Error al conectar con la base de datos: ${error.message}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserta datos iniciales (usuario admin)\r\n */\r\nconst seedInitialData = async (db) => {\r\n  try {\r\n    const adminExists = await db.query(\r\n      'SELECT 1 FROM usuarios WHERE email = ?',\r\n      ['admin@vidawasi.com']\r\n    );\r\n    \r\n    if (adminExists.values.length === 0) {\r\n      await db.run(\r\n        `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n         VALUES (?, ?, ?, ?, ?)`,\r\n        [\r\n          'Administrador', \r\n          'admin@vidawasi.com', \r\n          'admin123', \r\n          'administracion', \r\n          new Date().toISOString()\r\n        ]\r\n      );\r\n      console.log('[SQLite] Usuario admin creado');\r\n    }\r\n  } catch (error) {\r\n    console.error('[SQLite] Error en seedInitialData:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Función wrapper para manejo seguro de operaciones\r\n */\r\nconst withDB = async (operation) => {\r\n  try {\r\n    const db = await initDB();\r\n    return await operation(db);\r\n  } catch (error) {\r\n    console.error('[SQLite] Error en operación:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ---- Operaciones de Autenticación ----\r\nexport const loginUser = async (email, password) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1',\r\n      [email, password]\r\n    );\r\n    \r\n    if (result.values.length > 0) {\r\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\r\n      return result.values[0];\r\n    }\r\n    return null;\r\n  });\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  return withDB(async (db) => {\r\n    const existing = await db.query(\r\n      'SELECT 1 FROM usuarios WHERE email = ?', \r\n      [userData.email]\r\n    );\r\n    \r\n    if (existing.values.length > 0) {\r\n      throw new Error('El email ya está registrado');\r\n    }\r\n\r\n    const result = await db.run(\r\n      `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      [\r\n        userData.nombre, \r\n        userData.email, \r\n        userData.password, \r\n        userData.rol, \r\n        new Date().toISOString()\r\n      ]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1'\r\n    );\r\n    return result.values.length > 0 ? result.values[0] : null;\r\n  });\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n  return withDB(async (db) => {\r\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n  });\r\n};\r\n\r\n// ---- Operaciones de Pacientes ----\r\nexport const getPacientes = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query('SELECT * FROM pacientes');\r\n    return result.values || [];\r\n  });\r\n};\r\n\r\nexport const addPaciente = async (paciente) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.run(\r\n      'INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)',\r\n      [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\n// ---- Operaciones de Citas ----\r\nexport const getCitas = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(`\r\n      SELECT c.*, p.nombre as paciente_nombre \r\n      FROM citas c\r\n      LEFT JOIN pacientes p ON c.paciente_id = p.id\r\n    `);\r\n    return result.values || [];\r\n  });\r\n};\r\n\r\nexport const addCita = async (cita) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.run(\r\n      `INSERT INTO citas (paciente_id, fecha, hora, motivo)\r\n       VALUES (?, ?, ?, ?)`,\r\n      [cita.patientId, cita.date, cita.time, cita.reason]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\n/**\r\n * Función para desarrollo: Reinicia la base de datos\r\n */\r\nexport const resetDB = async () => {\r\n  if (!Capacitor.isNativePlatform()) {\r\n    console.warn('resetDB solo disponible en plataformas nativas');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    await sqlite.deleteDatabase({ database: 'vidawasi_db' });\r\n    dbInstance = null;\r\n    console.log('[SQLite] Base de datos reiniciada');\r\n  } catch (error) {\r\n    console.error('[SQLite] Error al resetear DB:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}