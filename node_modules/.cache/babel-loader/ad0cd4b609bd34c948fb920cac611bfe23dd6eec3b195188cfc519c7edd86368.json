{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\nexport const initDB = async () => {\n  if (!dbInstance) {\n    dbInstance = await sqlite.createConnection('vidawasi_db', false, 'no-encryption', 1, false);\n    await dbInstance.open();\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS usuarios (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\n        registrado_en TEXT NOT NULL,\n        is_logged_in BOOLEAN DEFAULT 0\n      );\n    `);\n\n    // Datos iniciales de administrador\n    const adminExists = await dbInstance.query('SELECT 1 FROM usuarios WHERE email = ?', ['admin@vidawasi.com']);\n    if (adminExists.values.length === 0) {\n      await dbInstance.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n         VALUES (?, ?, ?, ?, ?)`, ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]);\n    }\n  }\n  return dbInstance;\n};\n\n// Operaciones de autenticaci칩n\nexport const loginUser = async (email, password) => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1', [email, password]);\n  if (result.values.length > 0) {\n    await db.run('UPDATE usuarios SET is_logged_in = 0'); // Cerrar otras sesiones\n    await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\n    return result.values[0];\n  }\n  return null;\n};\nexport const registerUser = async userData => {\n  const db = await initDB();\n  try {\n    const result = await db.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n       VALUES (?, ?, ?, ?, ?)`, [userData.nombre, userData.email, userData.password, userData.rol, new Date().toISOString()]);\n    return result.lastId;\n  } catch (error) {\n    if (error.message.includes('UNIQUE')) {\n      throw new Error('El email ya est치 registrado');\n    }\n    throw error;\n  }\n};\nexport const getCurrentUser = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\n  return result.values.length > 0 ? result.values[0] : null;\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","sqlite","dbInstance","initDB","createConnection","open","execute","adminExists","query","values","length","run","Date","toISOString","loginUser","email","password","db","result","id","registerUser","userData","nombre","rol","lastId","error","message","includes","Error","getCurrentUser"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\nexport const initDB = async () => {\r\n  if (!dbInstance) {\r\n    dbInstance = await sqlite.createConnection(\r\n      'vidawasi_db',\r\n      false,\r\n      'no-encryption',\r\n      1,\r\n      false\r\n    );\r\n    await dbInstance.open();\r\n\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS usuarios (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        email TEXT UNIQUE NOT NULL,\r\n        password TEXT NOT NULL,\r\n        rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\r\n        registrado_en TEXT NOT NULL,\r\n        is_logged_in BOOLEAN DEFAULT 0\r\n      );\r\n    `);\r\n\r\n    // Datos iniciales de administrador\r\n    const adminExists = await dbInstance.query(\r\n      'SELECT 1 FROM usuarios WHERE email = ?',\r\n      ['admin@vidawasi.com']\r\n    );\r\n    if (adminExists.values.length === 0) {\r\n      await dbInstance.run(\r\n        `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n         VALUES (?, ?, ?, ?, ?)`,\r\n        ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]\r\n      );\r\n    }\r\n  }\r\n  return dbInstance;\r\n};\r\n\r\n// Operaciones de autenticaci칩n\r\nexport const loginUser = async (email, password) => {\r\n  const db = await initDB();\r\n  const result = await db.query(\r\n    'SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1',\r\n    [email, password]\r\n  );\r\n  \r\n  if (result.values.length > 0) {\r\n    await db.run('UPDATE usuarios SET is_logged_in = 0'); // Cerrar otras sesiones\r\n    await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\r\n    return result.values[0];\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  const db = await initDB();\r\n  try {\r\n    const result = await db.run(\r\n      `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      [userData.nombre, userData.email, userData.password, userData.rol, new Date().toISOString()]\r\n    );\r\n    return result.lastId;\r\n  } catch (error) {\r\n    if (error.message.includes('UNIQUE')) {\r\n      throw new Error('El email ya est치 registrado');\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\r\n  return result.values.length > 0 ? result.values[0] : null;\r\n};"],"mappings":"AAAA,SAASA,eAAe,EAAEC,gBAAgB,QAAQ,6BAA6B;AAE/E,MAAMC,MAAM,GAAG,IAAID,gBAAgB,CAACD,eAAe,CAAC;AACpD,IAAIG,UAAU;AAEd,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI,CAACD,UAAU,EAAE;IACfA,UAAU,GAAG,MAAMD,MAAM,CAACG,gBAAgB,CACxC,aAAa,EACb,KAAK,EACL,eAAe,EACf,CAAC,EACD,KACF,CAAC;IACD,MAAMF,UAAU,CAACG,IAAI,CAAC,CAAC;IAEvB,MAAMH,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;;IAEF;IACA,MAAMC,WAAW,GAAG,MAAML,UAAU,CAACM,KAAK,CACxC,wCAAwC,EACxC,CAAC,oBAAoB,CACvB,CAAC;IACD,IAAID,WAAW,CAACE,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MACnC,MAAMR,UAAU,CAACS,GAAG,CAClB;AACR,gCAAgC,EACxB,CAAC,eAAe,EAAE,oBAAoB,EAAE,UAAU,EAAE,gBAAgB,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAChG,CAAC;IACH;EACF;EACA,OAAOX,UAAU;AACnB,CAAC;;AAED;AACA,OAAO,MAAMY,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,MAAMC,EAAE,GAAG,MAAMd,MAAM,CAAC,CAAC;EACzB,MAAMe,MAAM,GAAG,MAAMD,EAAE,CAACT,KAAK,CAC3B,iEAAiE,EACjE,CAACO,KAAK,EAAEC,QAAQ,CAClB,CAAC;EAED,IAAIE,MAAM,CAACT,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IAC5B,MAAMO,EAAE,CAACN,GAAG,CAAC,sCAAsC,CAAC,CAAC,CAAC;IACtD,MAAMM,EAAE,CAACN,GAAG,CAAC,mDAAmD,EAAE,CAACO,MAAM,CAACT,MAAM,CAAC,CAAC,CAAC,CAACU,EAAE,CAAC,CAAC;IACxF,OAAOD,MAAM,CAACT,MAAM,CAAC,CAAC,CAAC;EACzB;EACA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMW,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,MAAMJ,EAAE,GAAG,MAAMd,MAAM,CAAC,CAAC;EACzB,IAAI;IACF,MAAMe,MAAM,GAAG,MAAMD,EAAE,CAACN,GAAG,CACzB;AACN,8BAA8B,EACxB,CAACU,QAAQ,CAACC,MAAM,EAAED,QAAQ,CAACN,KAAK,EAAEM,QAAQ,CAACL,QAAQ,EAAEK,QAAQ,CAACE,GAAG,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAC7F,CAAC;IACD,OAAOK,MAAM,CAACM,MAAM;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MACpC,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMH,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMZ,EAAE,GAAG,MAAMd,MAAM,CAAC,CAAC;EACzB,MAAMe,MAAM,GAAG,MAAMD,EAAE,CAACT,KAAK,CAAC,uDAAuD,CAAC;EACtF,OAAOU,MAAM,CAACT,MAAM,CAACC,MAAM,GAAG,CAAC,GAAGQ,MAAM,CAACT,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;AAC3D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}