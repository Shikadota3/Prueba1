{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nimport { Capacitor } from '@capacitor/core';\n\n// Configuración inicial\nconst DB_CONFIG = {\n  name: 'vidawasi_db',\n  version: 1,\n  encryption: false\n};\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\n\n// Mock para desarrollo web\nconst createMockDB = () => {\n  console.warn('Usando base de datos mock para navegador');\n  let users = [{\n    id: 1,\n    nombre: 'Admin Mock',\n    email: 'admin@vidawasi.com',\n    password: 'admin123',\n    rol: 'administracion',\n    is_logged_in: 1\n  }];\n  return {\n    execute: async () => {},\n    query: async (sql, params) => {\n      if (sql.includes('SELECT * FROM usuarios WHERE is_logged_in = 1')) {\n        return {\n          values: [users.find(u => u.is_logged_in)]\n        };\n      }\n      return {\n        values: []\n      };\n    },\n    run: async (sql, params) => ({\n      changes: 1,\n      lastId: 1\n    }),\n    close: async () => {},\n    isConnected: async () => ({\n      connected: true\n    })\n  };\n};\nexport const initDB = async () => {\n  try {\n    var _adminExists$values;\n    // Modo navegador\n    if (!Capacitor.isNativePlatform()) {\n      dbInstance = createMockDB();\n      return dbInstance;\n    }\n\n    // Modo nativo\n    dbInstance = await sqlite.createConnection(DB_CONFIG);\n    await dbInstance.open();\n    if (!(await dbInstance.isConnected()).connected) {\n      throw new Error('Conexión fallida');\n    }\n\n    // Creación de tablas\n    await dbInstance.executeTransaction([{\n      statement: `CREATE TABLE IF NOT EXISTS usuarios (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          nombre TEXT NOT NULL,\n          email TEXT UNIQUE NOT NULL,\n          password TEXT NOT NULL,\n          rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\n          registrado_en TEXT NOT NULL,\n          is_logged_in BOOLEAN DEFAULT 0\n        )`\n    }\n    // ... otras tablas\n    ]);\n\n    // Datos iniciales\n    const adminExists = await dbInstance.query('SELECT 1 FROM usuarios WHERE email = ?', ['admin@vidawasi.com']);\n    if (!((_adminExists$values = adminExists.values) !== null && _adminExists$values !== void 0 && _adminExists$values.length)) {\n      await dbInstance.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n         VALUES (?, ?, ?, ?, ?)`, ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]);\n    }\n    return dbInstance;\n  } catch (error) {\n    console.error('Error en initDB:', error);\n    throw error;\n  }\n};\n/**\r\n * Función wrapper para manejo seguro de operaciones\r\n */\nconst withDB = async operation => {\n  try {\n    const db = await initDB();\n    return await operation(db);\n  } catch (error) {\n    console.error('[SQLite] Error en operación:', error);\n    throw error;\n  }\n};\n\n// ---- Operaciones de Autenticación ----\nexport const loginUser = async (email, password) => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1', [email, password]);\n    if (result.values.length > 0) {\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\n      return result.values[0];\n    }\n    return null;\n  });\n};\nexport const registerUser = async userData => {\n  return withDB(async db => {\n    const existing = await db.query('SELECT 1 FROM usuarios WHERE email = ?', [userData.email]);\n    if (existing.values.length > 0) {\n      throw new Error('El email ya está registrado');\n    }\n    const result = await db.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n       VALUES (?, ?, ?, ?, ?)`, [userData.nombre, userData.email, userData.password, userData.rol, new Date().toISOString()]);\n    return result.lastId;\n  });\n};\nexport const getCurrentUser = async () => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\n    return result.values.length > 0 ? result.values[0] : null;\n  });\n};\nexport const logoutUser = async () => {\n  return withDB(async db => {\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\n  });\n};\n\n// ---- Operaciones de Pacientes ----\nexport const getPacientes = async () => {\n  return withDB(async db => {\n    const result = await db.query('SELECT * FROM pacientes');\n    return result.values || [];\n  });\n};\nexport const addPaciente = async paciente => {\n  return withDB(async db => {\n    const result = await db.run('INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)', [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]);\n    return result.lastId;\n  });\n};\n\n// ---- Operaciones de Citas ----\nexport const getCitas = async () => {\n  return withDB(async db => {\n    const result = await db.query(`\n      SELECT c.*, p.nombre as paciente_nombre \n      FROM citas c\n      LEFT JOIN pacientes p ON c.paciente_id = p.id\n    `);\n    return result.values || [];\n  });\n};\nexport const addCita = async cita => {\n  return withDB(async db => {\n    const result = await db.run(`INSERT INTO citas (paciente_id, fecha, hora, motivo)\n       VALUES (?, ?, ?, ?)`, [cita.patientId, cita.date, cita.time, cita.reason]);\n    return result.lastId;\n  });\n};\n\n/**\r\n * Función para desarrollo: Reinicia la base de datos\r\n */\nexport const resetDB = async () => {\n  if (!Capacitor.isNativePlatform()) {\n    console.warn('resetDB solo disponible en plataformas nativas');\n    return;\n  }\n  try {\n    await sqlite.deleteDatabase({\n      database: 'vidawasi_db'\n    });\n    dbInstance = null;\n    console.log('[SQLite] Base de datos reiniciada');\n  } catch (error) {\n    console.error('[SQLite] Error al resetear DB:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","Capacitor","DB_CONFIG","name","version","encryption","sqlite","dbInstance","createMockDB","console","warn","users","id","nombre","email","password","rol","is_logged_in","execute","query","sql","params","includes","values","find","u","run","changes","lastId","close","isConnected","connected","initDB","_adminExists$values","isNativePlatform","createConnection","open","Error","executeTransaction","statement","adminExists","length","Date","toISOString","error","withDB","operation","db","loginUser","result","registerUser","userData","existing","getCurrentUser","logoutUser","getPacientes","addPaciente","paciente","edad","diagnostico","hemoglobina","getCitas","addCita","cita","patientId","date","time","reason","resetDB","deleteDatabase","database","log"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\nimport { Capacitor } from '@capacitor/core';\r\n\r\n// Configuración inicial\r\nconst DB_CONFIG = {\r\n  name: 'vidawasi_db',\r\n  version: 1,\r\n  encryption: false\r\n};\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\n// Mock para desarrollo web\r\nconst createMockDB = () => {\r\n  console.warn('Usando base de datos mock para navegador');\r\n  let users = [\r\n    {\r\n      id: 1,\r\n      nombre: 'Admin Mock',\r\n      email: 'admin@vidawasi.com',\r\n      password: 'admin123',\r\n      rol: 'administracion',\r\n      is_logged_in: 1\r\n    }\r\n  ];\r\n\r\n  return {\r\n    execute: async () => {},\r\n    query: async (sql, params) => {\r\n      if (sql.includes('SELECT * FROM usuarios WHERE is_logged_in = 1')) {\r\n        return { values: [users.find(u => u.is_logged_in)] };\r\n      }\r\n      return { values: [] };\r\n    },\r\n    run: async (sql, params) => ({ changes: 1, lastId: 1 }),\r\n    close: async () => {},\r\n    isConnected: async () => ({ connected: true })\r\n  };\r\n};\r\n\r\nexport const initDB = async () => {\r\n  try {\r\n    // Modo navegador\r\n    if (!Capacitor.isNativePlatform()) {\r\n      dbInstance = createMockDB();\r\n      return dbInstance;\r\n    }\r\n\r\n    // Modo nativo\r\n    dbInstance = await sqlite.createConnection(DB_CONFIG);\r\n    await dbInstance.open();\r\n\r\n    if (!(await dbInstance.isConnected()).connected) {\r\n      throw new Error('Conexión fallida');\r\n    }\r\n\r\n    // Creación de tablas\r\n    await dbInstance.executeTransaction([\r\n      {\r\n        statement: `CREATE TABLE IF NOT EXISTS usuarios (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          nombre TEXT NOT NULL,\r\n          email TEXT UNIQUE NOT NULL,\r\n          password TEXT NOT NULL,\r\n          rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\r\n          registrado_en TEXT NOT NULL,\r\n          is_logged_in BOOLEAN DEFAULT 0\r\n        )`\r\n      },\r\n      // ... otras tablas\r\n    ]);\r\n\r\n    // Datos iniciales\r\n    const adminExists = await dbInstance.query(\r\n      'SELECT 1 FROM usuarios WHERE email = ?',\r\n      ['admin@vidawasi.com']\r\n    );\r\n    \r\n    if (!adminExists.values?.length) {\r\n      await dbInstance.run(\r\n        `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n         VALUES (?, ?, ?, ?, ?)`,\r\n        ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]\r\n      );\r\n    }\r\n\r\n    return dbInstance;\r\n  } catch (error) {\r\n    console.error('Error en initDB:', error);\r\n    throw error;\r\n  }\r\n};\r\n/**\r\n * Función wrapper para manejo seguro de operaciones\r\n */\r\nconst withDB = async (operation) => {\r\n  try {\r\n    const db = await initDB();\r\n    return await operation(db);\r\n  } catch (error) {\r\n    console.error('[SQLite] Error en operación:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ---- Operaciones de Autenticación ----\r\nexport const loginUser = async (email, password) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1',\r\n      [email, password]\r\n    );\r\n    \r\n    if (result.values.length > 0) {\r\n      await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n      await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\r\n      return result.values[0];\r\n    }\r\n    return null;\r\n  });\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  return withDB(async (db) => {\r\n    const existing = await db.query(\r\n      'SELECT 1 FROM usuarios WHERE email = ?', \r\n      [userData.email]\r\n    );\r\n    \r\n    if (existing.values.length > 0) {\r\n      throw new Error('El email ya está registrado');\r\n    }\r\n\r\n    const result = await db.run(\r\n      `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n       VALUES (?, ?, ?, ?, ?)`,\r\n      [\r\n        userData.nombre, \r\n        userData.email, \r\n        userData.password, \r\n        userData.rol, \r\n        new Date().toISOString()\r\n      ]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(\r\n      'SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1'\r\n    );\r\n    return result.values.length > 0 ? result.values[0] : null;\r\n  });\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n  return withDB(async (db) => {\r\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n  });\r\n};\r\n\r\n// ---- Operaciones de Pacientes ----\r\nexport const getPacientes = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query('SELECT * FROM pacientes');\r\n    return result.values || [];\r\n  });\r\n};\r\n\r\nexport const addPaciente = async (paciente) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.run(\r\n      'INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)',\r\n      [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\n// ---- Operaciones de Citas ----\r\nexport const getCitas = async () => {\r\n  return withDB(async (db) => {\r\n    const result = await db.query(`\r\n      SELECT c.*, p.nombre as paciente_nombre \r\n      FROM citas c\r\n      LEFT JOIN pacientes p ON c.paciente_id = p.id\r\n    `);\r\n    return result.values || [];\r\n  });\r\n};\r\n\r\nexport const addCita = async (cita) => {\r\n  return withDB(async (db) => {\r\n    const result = await db.run(\r\n      `INSERT INTO citas (paciente_id, fecha, hora, motivo)\r\n       VALUES (?, ?, ?, ?)`,\r\n      [cita.patientId, cita.date, cita.time, cita.reason]\r\n    );\r\n    return result.lastId;\r\n  });\r\n};\r\n\r\n/**\r\n * Función para desarrollo: Reinicia la base de datos\r\n */\r\nexport const resetDB = async () => {\r\n  if (!Capacitor.isNativePlatform()) {\r\n    console.warn('resetDB solo disponible en plataformas nativas');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    await sqlite.deleteDatabase({ database: 'vidawasi_db' });\r\n    dbInstance = null;\r\n    console.log('[SQLite] Base de datos reiniciada');\r\n  } catch (error) {\r\n    console.error('[SQLite] Error al resetear DB:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}