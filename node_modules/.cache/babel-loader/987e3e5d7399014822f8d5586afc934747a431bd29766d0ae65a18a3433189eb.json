{"ast":null,"code":"// utils/storage.js\nimport { SQLite } from '@capacitor-community/sqlite';\nimport { Preferences } from '@capacitor/preferences';\n\n// 1. Para datos simples (configuraciones)\nexport const saveToLocal = async (key, value) => {\n  await Preferences.set({\n    key,\n    value: JSON.stringify(value)\n  });\n};\nexport const getFromLocal = async key => {\n  const {\n    value\n  } = await Preferences.get({\n    key\n  });\n  return value ? JSON.parse(value) : null;\n};\n\n// 2. Para datos estructurados (SQLite)\nlet db;\nexport const initDB = async () => {\n  if (!db) {\n    db = await SQLite.createConnection('vidawasi_db');\n    await db.open();\n    await db.execute(`\n      CREATE TABLE IF NOT EXISTS pacientes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT,\n        edad INTEGER,\n        sintomas TEXT,\n        foto TEXT\n      );\n    `);\n  }\n  return db;\n};\n\n// Operaciones CRUD para pacientes\nexport const addPaciente = async paciente => {\n  const db = await initDB();\n  const result = await db.run('INSERT INTO pacientes (nombre, edad, sintomas, foto) VALUES (?, ?, ?, ?)', [paciente.nombre, paciente.edad, paciente.sintomas, paciente.foto]);\n  return result.lastId;\n};\nexport const getPacientes = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM pacientes');\n  return result.values;\n};","map":{"version":3,"names":["SQLite","Preferences","saveToLocal","key","value","set","JSON","stringify","getFromLocal","get","parse","db","initDB","createConnection","open","execute","addPaciente","paciente","result","run","nombre","edad","sintomas","foto","lastId","getPacientes","query","values"],"sources":["C:/RAUL/TRABAJOS/Aplicativo Vidawasi v3.0/project/src/utils/storage.js"],"sourcesContent":["// utils/storage.js\nimport { SQLite } from '@capacitor-community/sqlite';\nimport { Preferences } from '@capacitor/preferences';\n\n// 1. Para datos simples (configuraciones)\nexport const saveToLocal = async (key, value) => {\n  await Preferences.set({ key, value: JSON.stringify(value) });\n};\n\nexport const getFromLocal = async (key) => {\n  const { value } = await Preferences.get({ key });\n  return value ? JSON.parse(value) : null;\n};\n\n// 2. Para datos estructurados (SQLite)\nlet db;\n\nexport const initDB = async () => {\n  if (!db) {\n    db = await SQLite.createConnection('vidawasi_db');\n    await db.open();\n    \n    await db.execute(`\n      CREATE TABLE IF NOT EXISTS pacientes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT,\n        edad INTEGER,\n        sintomas TEXT,\n        foto TEXT\n      );\n    `);\n  }\n  return db;\n};\n\n// Operaciones CRUD para pacientes\nexport const addPaciente = async (paciente) => {\n  const db = await initDB();\n  const result = await db.run(\n    'INSERT INTO pacientes (nombre, edad, sintomas, foto) VALUES (?, ?, ?, ?)',\n    [paciente.nombre, paciente.edad, paciente.sintomas, paciente.foto]\n  );\n  return result.lastId;\n};\n\nexport const getPacientes = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM pacientes');\n  return result.values;\n};"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,6BAA6B;AACpD,SAASC,WAAW,QAAQ,wBAAwB;;AAEpD;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,GAAG,EAAEC,KAAK,KAAK;EAC/C,MAAMH,WAAW,CAACI,GAAG,CAAC;IAAEF,GAAG;IAAEC,KAAK,EAAEE,IAAI,CAACC,SAAS,CAACH,KAAK;EAAE,CAAC,CAAC;AAC9D,CAAC;AAED,OAAO,MAAMI,YAAY,GAAG,MAAOL,GAAG,IAAK;EACzC,MAAM;IAAEC;EAAM,CAAC,GAAG,MAAMH,WAAW,CAACQ,GAAG,CAAC;IAAEN;EAAI,CAAC,CAAC;EAChD,OAAOC,KAAK,GAAGE,IAAI,CAACI,KAAK,CAACN,KAAK,CAAC,GAAG,IAAI;AACzC,CAAC;;AAED;AACA,IAAIO,EAAE;AAEN,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI,CAACD,EAAE,EAAE;IACPA,EAAE,GAAG,MAAMX,MAAM,CAACa,gBAAgB,CAAC,aAAa,CAAC;IACjD,MAAMF,EAAE,CAACG,IAAI,CAAC,CAAC;IAEf,MAAMH,EAAE,CAACI,OAAO,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ;EACA,OAAOJ,EAAE;AACX,CAAC;;AAED;AACA,OAAO,MAAMK,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,MAAMN,EAAE,GAAG,MAAMC,MAAM,CAAC,CAAC;EACzB,MAAMM,MAAM,GAAG,MAAMP,EAAE,CAACQ,GAAG,CACzB,0EAA0E,EAC1E,CAACF,QAAQ,CAACG,MAAM,EAAEH,QAAQ,CAACI,IAAI,EAAEJ,QAAQ,CAACK,QAAQ,EAAEL,QAAQ,CAACM,IAAI,CACnE,CAAC;EACD,OAAOL,MAAM,CAACM,MAAM;AACtB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMd,EAAE,GAAG,MAAMC,MAAM,CAAC,CAAC;EACzB,MAAMM,MAAM,GAAG,MAAMP,EAAE,CAACe,KAAK,CAAC,yBAAyB,CAAC;EACxD,OAAOR,MAAM,CAACS,MAAM;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}