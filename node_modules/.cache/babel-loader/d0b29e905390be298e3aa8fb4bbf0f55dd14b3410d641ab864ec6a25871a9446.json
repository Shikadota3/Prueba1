{"ast":null,"code":"import { SQLite } from '@capacitor-community/sqlite';\nconst DB_NAME = 'vidawasi_db';\nlet dbInstance;\nexport const initDB = async () => {\n  if (!dbInstance) {\n    dbInstance = await SQLite.createConnection(DB_NAME);\n    await dbInstance.open();\n\n    // Tablas esenciales\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS pacientes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        edad INTEGER,\n        diagnostico TEXT,\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS citas (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        paciente_id INTEGER,\n        fecha TEXT NOT NULL,\n        notas TEXT,\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\n      );\n    `);\n  }\n  return dbInstance;\n};\n\n// Operaciones CRUD para pacientes\nexport const addPaciente = async paciente => {\n  const db = await initDB();\n  const result = await db.run('INSERT INTO pacientes (nombre, edad, diagnostico) VALUES (?, ?, ?)', [paciente.nombre, paciente.edad, paciente.diagnostico]);\n  return result.lastId;\n};\nexport const getPacientes = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM pacientes');\n  return result.values || [];\n};","map":{"version":3,"names":["SQLite","DB_NAME","dbInstance","initDB","createConnection","open","execute","addPaciente","paciente","db","result","run","nombre","edad","diagnostico","lastId","getPacientes","query","values"],"sources":["C:/RAUL/TRABAJOS/Aplicativo Vidawasi v3.0/project/src/utils/database.js"],"sourcesContent":["import { SQLite } from '@capacitor-community/sqlite';\r\n\r\nconst DB_NAME = 'vidawasi_db';\r\nlet dbInstance;\r\n\r\nexport const initDB = async () => {\r\n  if (!dbInstance) {\r\n    dbInstance = await SQLite.createConnection(DB_NAME);\r\n    await dbInstance.open();\r\n\r\n    // Tablas esenciales\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS pacientes (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        edad INTEGER,\r\n        diagnostico TEXT,\r\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\r\n      );\r\n    `);\r\n\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS citas (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        paciente_id INTEGER,\r\n        fecha TEXT NOT NULL,\r\n        notas TEXT,\r\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\r\n      );\r\n    `);\r\n  }\r\n  return dbInstance;\r\n};\r\n\r\n// Operaciones CRUD para pacientes\r\nexport const addPaciente = async (paciente) => {\r\n  const db = await initDB();\r\n  const result = await db.run(\r\n    'INSERT INTO pacientes (nombre, edad, diagnostico) VALUES (?, ?, ?)',\r\n    [paciente.nombre, paciente.edad, paciente.diagnostico]\r\n  );\r\n  return result.lastId;\r\n};\r\n\r\nexport const getPacientes = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query('SELECT * FROM pacientes');\r\n  return result.values || [];\r\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,6BAA6B;AAEpD,MAAMC,OAAO,GAAG,aAAa;AAC7B,IAAIC,UAAU;AAEd,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI,CAACD,UAAU,EAAE;IACfA,UAAU,GAAG,MAAMF,MAAM,CAACI,gBAAgB,CAACH,OAAO,CAAC;IACnD,MAAMC,UAAU,CAACG,IAAI,CAAC,CAAC;;IAEvB;IACA,MAAMH,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAEF,MAAMJ,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ;EACA,OAAOJ,UAAU;AACnB,CAAC;;AAED;AACA,OAAO,MAAMK,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,MAAMC,EAAE,GAAG,MAAMN,MAAM,CAAC,CAAC;EACzB,MAAMO,MAAM,GAAG,MAAMD,EAAE,CAACE,GAAG,CACzB,oEAAoE,EACpE,CAACH,QAAQ,CAACI,MAAM,EAAEJ,QAAQ,CAACK,IAAI,EAAEL,QAAQ,CAACM,WAAW,CACvD,CAAC;EACD,OAAOJ,MAAM,CAACK,MAAM;AACtB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMP,EAAE,GAAG,MAAMN,MAAM,CAAC,CAAC;EACzB,MAAMO,MAAM,GAAG,MAAMD,EAAE,CAACQ,KAAK,CAAC,yBAAyB,CAAC;EACxD,OAAOP,MAAM,CAACQ,MAAM,IAAI,EAAE;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}