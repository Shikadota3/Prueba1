{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\n\n// Inicialización de la base de datos\nexport const initDB = async () => {\n  try {\n    if (!dbInstance) {\n      dbInstance = await sqlite.createConnection('vidawasi_db', false, 'no-encryption', 1, false);\n      await dbInstance.open();\n\n      // Crear tablas si no existen\n      await dbInstance.execute(`\n        CREATE TABLE IF NOT EXISTS pacientes (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          nombre TEXT NOT NULL,\n          edad INTEGER,\n          diagnostico TEXT,\n          hemoglobina REAL,\n          fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n      await dbInstance.execute(`\n        CREATE TABLE IF NOT EXISTS citas (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          paciente_id INTEGER,\n          fecha TEXT NOT NULL,\n          hora TEXT NOT NULL,\n          motivo TEXT,\n          estado TEXT DEFAULT 'pendiente',\n          FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\n        );\n      `);\n      await dbInstance.execute(`\n        CREATE TABLE IF NOT EXISTS usuarios (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          nombre TEXT NOT NULL,\n          email TEXT UNIQUE NOT NULL,\n          password TEXT NOT NULL,\n          rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\n          registrado_en TEXT NOT NULL,\n          is_logged_in BOOLEAN DEFAULT 0\n        );\n      `);\n\n      // Datos iniciales de administrador\n      const adminExists = await dbInstance.query('SELECT 1 FROM usuarios WHERE email = ?', ['admin@vidawasi.com']);\n      if (adminExists.values.length === 0) {\n        await dbInstance.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n           VALUES (?, ?, ?, ?, ?)`, ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]);\n      }\n    }\n    return dbInstance;\n  } catch (error) {\n    console.error('Error en initDB:', error);\n    throw error;\n  }\n};\n\n// Autenticación\nexport const loginUser = async (email, password) => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1', [email, password]);\n  if (result.values.length > 0) {\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\n    await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\n    return result.values[0];\n  }\n  return null;\n};\nexport const registerUser = async userData => {\n  const db = await initDB();\n  const existing = await db.query('SELECT 1 FROM usuarios WHERE email = ?', [userData.email]);\n  if (existing.values.length > 0) {\n    throw new Error('El email ya está registrado');\n  }\n  const result = await db.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\n     VALUES (?, ?, ?, ?, ?)`, [userData.nombre, userData.email, userData.password, userData.rol, new Date().toISOString()]);\n  return result.lastId;\n};\nexport const getCurrentUser = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\n  return result.values.length > 0 ? result.values[0] : null;\n};\nexport const logoutUser = async () => {\n  const db = await initDB();\n  await db.run('UPDATE usuarios SET is_logged_in = 0');\n};\n\n// Operaciones para pacientes\nexport const getPacientes = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM pacientes');\n  return result.values || [];\n};\nexport const addPaciente = async paciente => {\n  const db = await initDB();\n  const result = await db.run('INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)', [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]);\n  return result.lastId;\n};\n\n// Operaciones para citas\nexport const getCitas = async () => {\n  const db = await initDB();\n  const result = await db.query(`\n    SELECT c.*, p.nombre as paciente_nombre \n    FROM citas c\n    LEFT JOIN pacientes p ON c.paciente_id = p.id\n  `);\n  return result.values || [];\n};\nexport const addCita = async cita => {\n  const db = await initDB();\n  const result = await db.run(`INSERT INTO citas (paciente_id, fecha, hora, motivo)\n     VALUES (?, ?, ?, ?)`, [cita.patientId, cita.date, cita.time, cita.reason]);\n  return result.lastId;\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","sqlite","dbInstance","initDB","createConnection","open","execute","adminExists","query","values","length","run","Date","toISOString","error","console","loginUser","email","password","db","result","id","registerUser","userData","existing","Error","nombre","rol","lastId","getCurrentUser","logoutUser","getPacientes","addPaciente","paciente","edad","diagnostico","hemoglobina","getCitas","addCita","cita","patientId","date","time","reason"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\n// Inicialización de la base de datos\r\nexport const initDB = async () => {\r\n  try {\r\n    if (!dbInstance) {\r\n      dbInstance = await sqlite.createConnection(\r\n        'vidawasi_db',\r\n        false,\r\n        'no-encryption',\r\n        1,\r\n        false\r\n      );\r\n      await dbInstance.open();\r\n\r\n      // Crear tablas si no existen\r\n      await dbInstance.execute(`\r\n        CREATE TABLE IF NOT EXISTS pacientes (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          nombre TEXT NOT NULL,\r\n          edad INTEGER,\r\n          diagnostico TEXT,\r\n          hemoglobina REAL,\r\n          fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\r\n        );\r\n      `);\r\n\r\n      await dbInstance.execute(`\r\n        CREATE TABLE IF NOT EXISTS citas (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          paciente_id INTEGER,\r\n          fecha TEXT NOT NULL,\r\n          hora TEXT NOT NULL,\r\n          motivo TEXT,\r\n          estado TEXT DEFAULT 'pendiente',\r\n          FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\r\n        );\r\n      `);\r\n\r\n      await dbInstance.execute(`\r\n        CREATE TABLE IF NOT EXISTS usuarios (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          nombre TEXT NOT NULL,\r\n          email TEXT UNIQUE NOT NULL,\r\n          password TEXT NOT NULL,\r\n          rol TEXT CHECK(rol IN ('administracion', 'doctor', 'cuidador')) NOT NULL,\r\n          registrado_en TEXT NOT NULL,\r\n          is_logged_in BOOLEAN DEFAULT 0\r\n        );\r\n      `);\r\n\r\n      // Datos iniciales de administrador\r\n      const adminExists = await dbInstance.query(\r\n        'SELECT 1 FROM usuarios WHERE email = ?',\r\n        ['admin@vidawasi.com']\r\n      );\r\n      if (adminExists.values.length === 0) {\r\n        await dbInstance.run(\r\n          `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n           VALUES (?, ?, ?, ?, ?)`,\r\n          ['Administrador', 'admin@vidawasi.com', 'admin123', 'administracion', new Date().toISOString()]\r\n        );\r\n      }\r\n    }\r\n    return dbInstance;\r\n  } catch (error) {\r\n    console.error('Error en initDB:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Autenticación\r\nexport const loginUser = async (email, password) => {\r\n  const db = await initDB();\r\n  const result = await db.query(\r\n    'SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1',\r\n    [email, password]\r\n  );\r\n  \r\n  if (result.values.length > 0) {\r\n    await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n    await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\r\n    return result.values[0];\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  const db = await initDB();\r\n  const existing = await db.query('SELECT 1 FROM usuarios WHERE email = ?', [userData.email]);\r\n  \r\n  if (existing.values.length > 0) {\r\n    throw new Error('El email ya está registrado');\r\n  }\r\n\r\n  const result = await db.run(\r\n    `INSERT INTO usuarios (nombre, email, password, rol, registrado_en)\r\n     VALUES (?, ?, ?, ?, ?)`,\r\n    [userData.nombre, userData.email, userData.password, userData.rol, new Date().toISOString()]\r\n  );\r\n  return result.lastId;\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\r\n  return result.values.length > 0 ? result.values[0] : null;\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n  const db = await initDB();\r\n  await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n};\r\n\r\n// Operaciones para pacientes\r\nexport const getPacientes = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query('SELECT * FROM pacientes');\r\n  return result.values || [];\r\n};\r\n\r\nexport const addPaciente = async (paciente) => {\r\n  const db = await initDB();\r\n  const result = await db.run(\r\n    'INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)',\r\n    [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]\r\n  );\r\n  return result.lastId;\r\n};\r\n\r\n// Operaciones para citas\r\nexport const getCitas = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query(`\r\n    SELECT c.*, p.nombre as paciente_nombre \r\n    FROM citas c\r\n    LEFT JOIN pacientes p ON c.paciente_id = p.id\r\n  `);\r\n  return result.values || [];\r\n};\r\n\r\nexport const addCita = async (cita) => {\r\n  const db = await initDB();\r\n  const result = await db.run(\r\n    `INSERT INTO citas (paciente_id, fecha, hora, motivo)\r\n     VALUES (?, ?, ?, ?)`,\r\n    [cita.patientId, cita.date, cita.time, cita.reason]\r\n  );\r\n  return result.lastId;\r\n};"],"mappings":"AAAA,SAASA,eAAe,EAAEC,gBAAgB,QAAQ,6BAA6B;AAE/E,MAAMC,MAAM,GAAG,IAAID,gBAAgB,CAACD,eAAe,CAAC;AACpD,IAAIG,UAAU;;AAEd;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,IAAI,CAACD,UAAU,EAAE;MACfA,UAAU,GAAG,MAAMD,MAAM,CAACG,gBAAgB,CACxC,aAAa,EACb,KAAK,EACL,eAAe,EACf,CAAC,EACD,KACF,CAAC;MACD,MAAMF,UAAU,CAACG,IAAI,CAAC,CAAC;;MAEvB;MACA,MAAMH,UAAU,CAACI,OAAO,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;MAEF,MAAMJ,UAAU,CAACI,OAAO,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;MAEF,MAAMJ,UAAU,CAACI,OAAO,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;;MAEF;MACA,MAAMC,WAAW,GAAG,MAAML,UAAU,CAACM,KAAK,CACxC,wCAAwC,EACxC,CAAC,oBAAoB,CACvB,CAAC;MACD,IAAID,WAAW,CAACE,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;QACnC,MAAMR,UAAU,CAACS,GAAG,CAClB;AACV,kCAAkC,EACxB,CAAC,eAAe,EAAE,oBAAoB,EAAE,UAAU,EAAE,gBAAgB,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAChG,CAAC;MACH;IACF;IACA,OAAOX,UAAU;EACnB,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,MAAMC,EAAE,GAAG,MAAMhB,MAAM,CAAC,CAAC;EACzB,MAAMiB,MAAM,GAAG,MAAMD,EAAE,CAACX,KAAK,CAC3B,iEAAiE,EACjE,CAACS,KAAK,EAAEC,QAAQ,CAClB,CAAC;EAED,IAAIE,MAAM,CAACX,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IAC5B,MAAMS,EAAE,CAACR,GAAG,CAAC,sCAAsC,CAAC;IACpD,MAAMQ,EAAE,CAACR,GAAG,CAAC,mDAAmD,EAAE,CAACS,MAAM,CAACX,MAAM,CAAC,CAAC,CAAC,CAACY,EAAE,CAAC,CAAC;IACxF,OAAOD,MAAM,CAACX,MAAM,CAAC,CAAC,CAAC;EACzB;EACA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMa,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,MAAMJ,EAAE,GAAG,MAAMhB,MAAM,CAAC,CAAC;EACzB,MAAMqB,QAAQ,GAAG,MAAML,EAAE,CAACX,KAAK,CAAC,wCAAwC,EAAE,CAACe,QAAQ,CAACN,KAAK,CAAC,CAAC;EAE3F,IAAIO,QAAQ,CAACf,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IAC9B,MAAM,IAAIe,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,MAAML,MAAM,GAAG,MAAMD,EAAE,CAACR,GAAG,CACzB;AACJ,4BAA4B,EACxB,CAACY,QAAQ,CAACG,MAAM,EAAEH,QAAQ,CAACN,KAAK,EAAEM,QAAQ,CAACL,QAAQ,EAAEK,QAAQ,CAACI,GAAG,EAAE,IAAIf,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAC7F,CAAC;EACD,OAAOO,MAAM,CAACQ,MAAM;AACtB,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMV,EAAE,GAAG,MAAMhB,MAAM,CAAC,CAAC;EACzB,MAAMiB,MAAM,GAAG,MAAMD,EAAE,CAACX,KAAK,CAAC,uDAAuD,CAAC;EACtF,OAAOY,MAAM,CAACX,MAAM,CAACC,MAAM,GAAG,CAAC,GAAGU,MAAM,CAACX,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;AAC3D,CAAC;AAED,OAAO,MAAMqB,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMX,EAAE,GAAG,MAAMhB,MAAM,CAAC,CAAC;EACzB,MAAMgB,EAAE,CAACR,GAAG,CAAC,sCAAsC,CAAC;AACtD,CAAC;;AAED;AACA,OAAO,MAAMoB,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMZ,EAAE,GAAG,MAAMhB,MAAM,CAAC,CAAC;EACzB,MAAMiB,MAAM,GAAG,MAAMD,EAAE,CAACX,KAAK,CAAC,yBAAyB,CAAC;EACxD,OAAOY,MAAM,CAACX,MAAM,IAAI,EAAE;AAC5B,CAAC;AAED,OAAO,MAAMuB,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,MAAMd,EAAE,GAAG,MAAMhB,MAAM,CAAC,CAAC;EACzB,MAAMiB,MAAM,GAAG,MAAMD,EAAE,CAACR,GAAG,CACzB,oFAAoF,EACpF,CAACsB,QAAQ,CAACP,MAAM,EAAEO,QAAQ,CAACC,IAAI,EAAED,QAAQ,CAACE,WAAW,EAAEF,QAAQ,CAACG,WAAW,CAC7E,CAAC;EACD,OAAOhB,MAAM,CAACQ,MAAM;AACtB,CAAC;;AAED;AACA,OAAO,MAAMS,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMlB,EAAE,GAAG,MAAMhB,MAAM,CAAC,CAAC;EACzB,MAAMiB,MAAM,GAAG,MAAMD,EAAE,CAACX,KAAK,CAAC;AAChC;AACA;AACA;AACA,GAAG,CAAC;EACF,OAAOY,MAAM,CAACX,MAAM,IAAI,EAAE;AAC5B,CAAC;AAED,OAAO,MAAM6B,OAAO,GAAG,MAAOC,IAAI,IAAK;EACrC,MAAMpB,EAAE,GAAG,MAAMhB,MAAM,CAAC,CAAC;EACzB,MAAMiB,MAAM,GAAG,MAAMD,EAAE,CAACR,GAAG,CACzB;AACJ,yBAAyB,EACrB,CAAC4B,IAAI,CAACC,SAAS,EAAED,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,MAAM,CACpD,CAAC;EACD,OAAOvB,MAAM,CAACQ,MAAM;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}