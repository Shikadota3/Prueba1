{"ast":null,"code":"import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\nlet dbInstance;\nexport const initDB = async () => {\n  if (!dbInstance) {\n    dbInstance = await sqlite.createConnection('vidawasi_db', false, 'no-encryption', 1, false);\n    await dbInstance.open();\n\n    // Tablas esenciales\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS pacientes (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        edad INTEGER,\n        diagnostico TEXT,\n        hemoglobina REAL,\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS citas (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        paciente_id INTEGER,\n        fecha TEXT NOT NULL,\n        hora TEXT NOT NULL,\n        motivo TEXT,\n        estado TEXT DEFAULT 'pendiente',\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\n      );\n    `);\n    await dbInstance.execute(`\n      CREATE TABLE IF NOT EXISTS usuarios (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nombre TEXT NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        rol TEXT DEFAULT 'usuario',\n        registrado_en TEXT NOT NULL,\n        is_logged_in BOOLEAN DEFAULT 0\n      );\n    `);\n\n    // Datos iniciales de prueba\n    const usersCount = await dbInstance.query('SELECT COUNT(*) as count FROM usuarios');\n    if (usersCount.values[0].count === 0) {\n      await dbInstance.run(`INSERT INTO usuarios (nombre, email, password, rol, registrado_en) \n         VALUES (?, ?, ?, ?, ?)`, ['Admin', 'admin@vidawasi.com', 'admin123', 'admin', new Date().toISOString()]);\n    }\n  }\n  return dbInstance;\n};\n\n// Operaciones para pacientes\nexport const getPacientes = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM pacientes');\n  return result.values || [];\n};\nexport const addPaciente = async paciente => {\n  const db = await initDB();\n  const result = await db.run('INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)', [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]);\n  return result.lastId;\n};\n\n// Operaciones para citas\nexport const getCitas = async () => {\n  const db = await initDB();\n  const result = await db.query(`\n    SELECT c.*, p.nombre as paciente_nombre \n    FROM citas c\n    LEFT JOIN pacientes p ON c.paciente_id = p.id\n  `);\n  return result.values || [];\n};\nexport const addCita = async cita => {\n  const db = await initDB();\n  const result = await db.run(`INSERT INTO citas (paciente_id, fecha, hora, motivo) \n     VALUES (?, ?, ?, ?)`, [cita.patientId, cita.date, cita.time, cita.reason]);\n  return result.lastId;\n};\n\n// Operaciones para usuarios\nexport const loginUser = async (email, password) => {\n  const db = await initDB();\n  await db.run('UPDATE usuarios SET is_logged_in = 0');\n  const result = await db.query('SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1', [email, password]);\n  if (result.values.length > 0) {\n    await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\n    return result.values[0];\n  }\n  return null;\n};\nexport const getCurrentUser = async () => {\n  const db = await initDB();\n  const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\n  return result.values.length > 0 ? result.values[0] : null;\n};","map":{"version":3,"names":["CapacitorSQLite","SQLiteConnection","sqlite","dbInstance","initDB","createConnection","open","execute","usersCount","query","values","count","run","Date","toISOString","getPacientes","db","result","addPaciente","paciente","nombre","edad","diagnostico","hemoglobina","lastId","getCitas","addCita","cita","patientId","date","time","reason","loginUser","email","password","length","id","getCurrentUser"],"sources":["C:/Users/INTEL/Downloads/project/project/src/utils/database.js"],"sourcesContent":["import { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\r\n\r\nconst sqlite = new SQLiteConnection(CapacitorSQLite);\r\nlet dbInstance;\r\n\r\nexport const initDB = async () => {\r\n  if (!dbInstance) {\r\n    dbInstance = await sqlite.createConnection(\r\n      'vidawasi_db',\r\n      false,\r\n      'no-encryption',\r\n      1,\r\n      false\r\n    );\r\n    await dbInstance.open();\r\n\r\n    // Tablas esenciales\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS pacientes (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        edad INTEGER,\r\n        diagnostico TEXT,\r\n        hemoglobina REAL,\r\n        fecha_registro TEXT DEFAULT CURRENT_TIMESTAMP\r\n      );\r\n    `);\r\n\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS citas (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        paciente_id INTEGER,\r\n        fecha TEXT NOT NULL,\r\n        hora TEXT NOT NULL,\r\n        motivo TEXT,\r\n        estado TEXT DEFAULT 'pendiente',\r\n        FOREIGN KEY (paciente_id) REFERENCES pacientes(id)\r\n      );\r\n    `);\r\n\r\n    await dbInstance.execute(`\r\n      CREATE TABLE IF NOT EXISTS usuarios (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        nombre TEXT NOT NULL,\r\n        email TEXT UNIQUE NOT NULL,\r\n        password TEXT NOT NULL,\r\n        rol TEXT DEFAULT 'usuario',\r\n        registrado_en TEXT NOT NULL,\r\n        is_logged_in BOOLEAN DEFAULT 0\r\n      );\r\n    `);\r\n\r\n    // Datos iniciales de prueba\r\n    const usersCount = await dbInstance.query('SELECT COUNT(*) as count FROM usuarios');\r\n    if (usersCount.values[0].count === 0) {\r\n      await dbInstance.run(\r\n        `INSERT INTO usuarios (nombre, email, password, rol, registrado_en) \r\n         VALUES (?, ?, ?, ?, ?)`,\r\n        ['Admin', 'admin@vidawasi.com', 'admin123', 'admin', new Date().toISOString()]\r\n      );\r\n    }\r\n  }\r\n  return dbInstance;\r\n};\r\n\r\n// Operaciones para pacientes\r\nexport const getPacientes = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query('SELECT * FROM pacientes');\r\n  return result.values || [];\r\n};\r\n\r\nexport const addPaciente = async (paciente) => {\r\n  const db = await initDB();\r\n  const result = await db.run(\r\n    'INSERT INTO pacientes (nombre, edad, diagnostico, hemoglobina) VALUES (?, ?, ?, ?)',\r\n    [paciente.nombre, paciente.edad, paciente.diagnostico, paciente.hemoglobina]\r\n  );\r\n  return result.lastId;\r\n};\r\n\r\n// Operaciones para citas\r\nexport const getCitas = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query(`\r\n    SELECT c.*, p.nombre as paciente_nombre \r\n    FROM citas c\r\n    LEFT JOIN pacientes p ON c.paciente_id = p.id\r\n  `);\r\n  return result.values || [];\r\n};\r\n\r\nexport const addCita = async (cita) => {\r\n  const db = await initDB();\r\n  const result = await db.run(\r\n    `INSERT INTO citas (paciente_id, fecha, hora, motivo) \r\n     VALUES (?, ?, ?, ?)`,\r\n    [cita.patientId, cita.date, cita.time, cita.reason]\r\n  );\r\n  return result.lastId;\r\n};\r\n\r\n// Operaciones para usuarios\r\nexport const loginUser = async (email, password) => {\r\n  const db = await initDB();\r\n  await db.run('UPDATE usuarios SET is_logged_in = 0');\r\n  \r\n  const result = await db.query(\r\n    'SELECT * FROM usuarios WHERE email = ? AND password = ? LIMIT 1',\r\n    [email, password]\r\n  );\r\n  \r\n  if (result.values.length > 0) {\r\n    await db.run('UPDATE usuarios SET is_logged_in = 1 WHERE id = ?', [result.values[0].id]);\r\n    return result.values[0];\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  const db = await initDB();\r\n  const result = await db.query('SELECT * FROM usuarios WHERE is_logged_in = 1 LIMIT 1');\r\n  return result.values.length > 0 ? result.values[0] : null;\r\n};"],"mappings":"AAAA,SAASA,eAAe,EAAEC,gBAAgB,QAAQ,6BAA6B;AAE/E,MAAMC,MAAM,GAAG,IAAID,gBAAgB,CAACD,eAAe,CAAC;AACpD,IAAIG,UAAU;AAEd,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI,CAACD,UAAU,EAAE;IACfA,UAAU,GAAG,MAAMD,MAAM,CAACG,gBAAgB,CACxC,aAAa,EACb,KAAK,EACL,eAAe,EACf,CAAC,EACD,KACF,CAAC;IACD,MAAMF,UAAU,CAACG,IAAI,CAAC,CAAC;;IAEvB;IACA,MAAMH,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAEF,MAAMJ,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IAEF,MAAMJ,UAAU,CAACI,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;;IAEF;IACA,MAAMC,UAAU,GAAG,MAAML,UAAU,CAACM,KAAK,CAAC,wCAAwC,CAAC;IACnF,IAAID,UAAU,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,KAAK,CAAC,EAAE;MACpC,MAAMR,UAAU,CAACS,GAAG,CAClB;AACR,gCAAgC,EACxB,CAAC,OAAO,EAAE,oBAAoB,EAAE,UAAU,EAAE,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAC/E,CAAC;IACH;EACF;EACA,OAAOX,UAAU;AACnB,CAAC;;AAED;AACA,OAAO,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,EAAE,GAAG,MAAMZ,MAAM,CAAC,CAAC;EACzB,MAAMa,MAAM,GAAG,MAAMD,EAAE,CAACP,KAAK,CAAC,yBAAyB,CAAC;EACxD,OAAOQ,MAAM,CAACP,MAAM,IAAI,EAAE;AAC5B,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,MAAMH,EAAE,GAAG,MAAMZ,MAAM,CAAC,CAAC;EACzB,MAAMa,MAAM,GAAG,MAAMD,EAAE,CAACJ,GAAG,CACzB,oFAAoF,EACpF,CAACO,QAAQ,CAACC,MAAM,EAAED,QAAQ,CAACE,IAAI,EAAEF,QAAQ,CAACG,WAAW,EAAEH,QAAQ,CAACI,WAAW,CAC7E,CAAC;EACD,OAAON,MAAM,CAACO,MAAM;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMT,EAAE,GAAG,MAAMZ,MAAM,CAAC,CAAC;EACzB,MAAMa,MAAM,GAAG,MAAMD,EAAE,CAACP,KAAK,CAAC;AAChC;AACA;AACA;AACA,GAAG,CAAC;EACF,OAAOQ,MAAM,CAACP,MAAM,IAAI,EAAE;AAC5B,CAAC;AAED,OAAO,MAAMgB,OAAO,GAAG,MAAOC,IAAI,IAAK;EACrC,MAAMX,EAAE,GAAG,MAAMZ,MAAM,CAAC,CAAC;EACzB,MAAMa,MAAM,GAAG,MAAMD,EAAE,CAACJ,GAAG,CACzB;AACJ,yBAAyB,EACrB,CAACe,IAAI,CAACC,SAAS,EAAED,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,MAAM,CACpD,CAAC;EACD,OAAOd,MAAM,CAACO,MAAM;AACtB,CAAC;;AAED;AACA,OAAO,MAAMQ,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,MAAMlB,EAAE,GAAG,MAAMZ,MAAM,CAAC,CAAC;EACzB,MAAMY,EAAE,CAACJ,GAAG,CAAC,sCAAsC,CAAC;EAEpD,MAAMK,MAAM,GAAG,MAAMD,EAAE,CAACP,KAAK,CAC3B,iEAAiE,EACjE,CAACwB,KAAK,EAAEC,QAAQ,CAClB,CAAC;EAED,IAAIjB,MAAM,CAACP,MAAM,CAACyB,MAAM,GAAG,CAAC,EAAE;IAC5B,MAAMnB,EAAE,CAACJ,GAAG,CAAC,mDAAmD,EAAE,CAACK,MAAM,CAACP,MAAM,CAAC,CAAC,CAAC,CAAC0B,EAAE,CAAC,CAAC;IACxF,OAAOnB,MAAM,CAACP,MAAM,CAAC,CAAC,CAAC;EACzB;EACA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAM2B,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMrB,EAAE,GAAG,MAAMZ,MAAM,CAAC,CAAC;EACzB,MAAMa,MAAM,GAAG,MAAMD,EAAE,CAACP,KAAK,CAAC,uDAAuD,CAAC;EACtF,OAAOQ,MAAM,CAACP,MAAM,CAACyB,MAAM,GAAG,CAAC,GAAGlB,MAAM,CAACP,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;AAC3D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}